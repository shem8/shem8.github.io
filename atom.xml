<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Shem Magnezi Blog]]></title>
  <link href="http://blog.shem.dev/atom.xml" rel="self"/>
  <link href="http://blog.shem.dev/"/>
  <updated>2025-04-20T10:58:27+00:00</updated>
  <id>http://blog.shem.dev/</id>
  <author>
    <name><![CDATA[Shem Magnezi]]></name>
    <email><![CDATA[smagnezi8@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Uncertainty in the Workplace.]]></title>
    <link href="http://blog.shem.dev/blog/2020/06/09/uncertainty-in-the-workplace/"/>
    <updated>2020-06-09T14:31:39+00:00</updated>
    <id>http://blog.shem.dev/blog/2020/06/09/uncertainty-in-the-workplace</id>
    <content type="html"><![CDATA[<p><em>It&rsquo;s here, let&rsquo;s embrace it.</em></p>

<!-- more -->


<p>These are strange and sometimes intimidating times. A global epidemic rocked our world and changed a lot of the things that we thought are rock solid. Paths that seemed straight forward now took a sudden turn. Many of us need to adapt and adjust, and we need to do it fast which makes it even more daunting.</p>

<p>Already at this point, we can say that what hurt most is the economy: unemployment rate rise, retails sales plunge, and the global economy is probably going to change a lot in 2020. Many companies are reducing their workforce (if not already), some will completely shut down, and almost everybody going back to the drawing board to see how to handle this situation.</p>

<p>What also got hit, but without us realize the numbers, is the people&rsquo;s mental health. We already <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7075936/">know that humans don&rsquo;t cope well with the unknown</a>.</p>

<p>And between all these, there&rsquo;s you and me, and many more - the employees who aren&rsquo;t sure what will be with their position, their promotion, their team, their bonuses or generally their future in the company. This uncertainty can continue for weeks and even months, and we all should be prepared.</p>

<p>Unfortunately, In my last 3 jobs that spread across 8 years, I had to tackle a lot of situations similar to this (more or less, because in the end of the day, a global epidemic is something that we see once in 100 years). I don&rsquo;t know if this is because of me and my risk-taking nature, or the fast pacing industry that we live in, but every once in a while I found myself up in the air without a solid ground in the landscape. I specifically chose 3 stories from my career that are very different from each other and taught me different lessons.</p>

<p>In those situations, I saw people completely losing it while others bury their heads in the sand and wait till it over. With time I learned how to embrace those conditions and understand this is a crucial part of me as a human and how you make lemonade from those lemons.
But before we begin, something needs to be said - as I mentioned, we, as humans, don&rsquo;t deal well with uncertainty. <a href="https://en.wikipedia.org/wiki/Daniel_Kahneman">Daniel Kahneman</a> wrote plenty about this subject. So please don&rsquo;t feel bad that these times paralyze you or make is discomfort. Stress, sleep deprivation, and nervousness is completely common and legit. Even after I learned how to live with this uncertainty I still have some panic attacks from time to time, and this is another thing that you should embrace.</p>

<p>With that in mind, let&rsquo;s get back in time:</p>

<p><img class="center" src="http://blog.shem.dev/images/posts/uncertainty/1.gif" title="Credit: @gilcoh" ></p>

<h2>Story 1: The Startup</h2>

<p>Ah, 2015, the days where I was young, naive, optimist, and thinking that parenting will be a piece of cake. In other words - an idiot. It was my 4th year in a startup. we had great momentum, right on time for our second round of funding. But startups being startups, everything changed in a very short time.</p>

<p>Making a long story short - the company faced some obstacles and we had to take a pay cut for a few months. All we left to do is to sit until the management would pull off any financial solutions. Everyone was told that they can find a new place or to wait to see if they can get their missing salaries retroactive along with some bonuses.</p>

<p>In addition to all this, our first child was born, as a young 20 something couple, we were shocked and mainly overwhelmed (ok ok, me more than my wife), and soon enough we discovered that she suffers from serious allergies but no one knew from what.</p>

<p>This is how I found myself, a new father that is trying to understand what&rsquo;s going on, with low salary, running between hospitals, without any mental capacity to decide what is the right thing to do regarding the startup.</p>

<p>After a week where I was extremely sick and with no sleep at all, I had a long discussion with my wonderful wife. I found it amazing that she was completely calm and functioning as usual and asked her for help. And she taught me 2 things that helped me a lot to go over this period:</p>

<ul>
<li><p><strong>Don&rsquo;t beat yourself about things that you can&rsquo;t control:</strong> I was wondering all day and night (especially night) and torture myself &ldquo;what if&rdquo;: what if my daughter will suffer more, what if she will stay like this forever, what if the startup will shutdown, what if all my options will go to waste. But thinking about it wouldn&rsquo;t change the situation, it is what it is. So I decided to let things happen and focus on things that under my control: spending time with my daughter and make her laugh, helping my wife and give her the time to work, and give our founders the time to do their best.</p></li>
<li><p><strong>Take a decision for a defined timeframe, and don&rsquo;t look back:</strong> many times you&rsquo;re facing a crossroads where you need to decide what turn to take with limited data. For me, it was whether to stay and wait for the money or to forget about it and move with my life to the next gig. I could take the numbers and analyze it forever but no one can really know what will happen, so I decided that it&rsquo;s a good time for me to take a break anyway. After this decision was finalized I decided that in the coming 3 months I won&rsquo;t think about it and that is it.</p></li>
</ul>


<h2>Story 2: The Corporate</h2>

<p>In the end, the bet paid off and we were acquired by a big company. Soon enough I understand that this isn&rsquo;t for me and I looked for something else. After a couple of months, I found a very nice startup that I liked. I went to other places, but I realized that I fell in love with that startup and decided to blow off the rest.</p>

<p>Naive as I was, I went to my manager and asked to quit (and relinquished a lot of money as part of the acquisition). Later that day I got some bad news - the startup had some issues, causing them to start a hiring freeze for the next few months. My new job offer was canceled. Out of nowhere, I found myself without a job and throwing too much money to trash.</p>

<p>I wasn&rsquo;t ready to start looking for a new job, something that probably would have taken a few weeks. In the next 2 weeks, I did everything to get my job back, I tried to explain to my corporate managers that my plans were completely mixed up and begged them to take me back, I also offered to take the lead on a project that no one else wanted to take. Eventually, they agreed, but those 2 weeks were a nightmare, especially because of how surprising it was and how fast I went from hero to zero. During those days I learned 2 lessons:</p>

<ul>
<li><p><strong>It&rsquo;s easier to handle the worst-case scenario than to imagine it:</strong> as one that came from a lower-middle-class house, being unemployed was one of my worst nightmares. Suddenly as it became a reality it wasn&rsquo;t that scary since I knew exactly how to get out of this situation. You need to remember- the uncertainty is making you much more difficult than the actual thing that&rsquo;s going to happen.</p></li>
<li><p><strong>Always have a plan B:</strong> I was so confident that everything will go smoothly, I didn&rsquo;t even consider the alternatives. In life, shit happens, so when things start rolling, you better have one or two fallbacks in case things go south. That&rsquo;s how you can have more control and less uncertainty in tricky situations.</p></li>
</ul>


<h2>Story 3: The Roller Coaster</h2>

<p>For the last story, I want to jump to the last 6 months, that was certainly shaking, to say the least. In addition to a global epidemic that completely changed the world and shut down many businesses, I was working in a company that&rsquo;s in the co-working industry and the business was highly affected. That&rsquo;s in addition to all the chaos going on even before the COVID-19.</p>

<p>It was a very stressful 6 months period that started in October - by now you can probably guess which company I&rsquo;m talking about, so I will just mention my plans on the downsizing of the technological org. But it was clear right from the beginning, that I should start to prepare. Learned from my previous experience I knew I needed to think deeply about what&rsquo;s next and plan for a couple of options. I took the time and started checking all my alternatives, taking it easy knowing I have a couple of months to do the market research, mapping the options, and prepare for interviews (this was the first time in my career that I&rsquo;m going to be in the interviewee seat and actually do whiteboard questions).</p>

<p>The preparation helped when the uncertainty levels got higher and higher (and it surely went pretty high). It also paid off because I got what I wanted in May and found a place that hopefully will be exactly what I wanted. I still had some restless nights but I saw the difference and the toll it had on some peers.</p>

<p>What helped me most to go over these challenges times was mainly:</p>

<ul>
<li><p><strong>Take a timeout-</strong> most of the things in these kinds of situations won&rsquo;t be under your control, so instead of focusing on those things. Find your anchor and go back to the things you can handle and you might help you reduce the stress: get some rest, spending time with your friends and family, read books, practice, and find new hobbies. This is the best time to care for yourself since it&rsquo;s probably a time where there&rsquo;s not much of a workload, and you don&rsquo;t need to think about the next performance circle.</p></li>
<li><p><strong>Prepare in advance-</strong> for most of the cases, a crisis won&rsquo;t come out of nowhere. For the majority of the strong businesses, the COVID-19 hit hard but they&rsquo;ll recover sooner or later, for businesses that were not prepared, COVID-19 pushed them off balance and some into a death spiral. When shit hits the fan things will go fast and stress will kick in, you want to be prepare beforehand and thus when the uncertainty will come, you&rsquo;ll be ready.</p></li>
</ul>


<h2>Wrapping Up</h2>

<p>The employment landscape is changing at a fast pace, due to employees, fast-growing companies, and the crazy financial landscape. That brings a constant level of uncertainty that adds up. Whether we like it or not, with this pace comes uncertainty at times and we have to create the tools for ourselves to handle it.</p>

<p>In this post, I described a couple of times in my career when I needed to handle uncertainty, and you saw it happens both in small and big companies. Here are some points to pay attention that can help you go over these hard times (without any particular order):</p>

<ul>
<li><strong>Don&rsquo;t beat yourself about things that you can&rsquo;t control.</strong></li>
<li><strong>Take a decision for a defined timeframe, and don&rsquo;t look back.</strong></li>
<li><strong>It&rsquo;s easier to handle the worst-case scenario than to imagine it.</strong></li>
<li><strong>Always have a plan B.</strong></li>
<li><strong>Take a timeout.</strong></li>
<li><strong>Prepare in advance.</strong></li>
</ul>


<hr />

<p>And remember - it&rsquo;s hard. Most of the people don&rsquo;t handle these kinds of events well. Try to share and talk with the people around you, it&rsquo;s much easier to handle it with a group than alone.</p>

<p><img class="center" src="http://blog.shem.dev/images/posts/uncertainty/2.jpeg" title="Credit: Andy Hayt" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dear Mr./Ms. Recruiter]]></title>
    <link href="http://blog.shem.dev/blog/2020/05/27/dear-mr-dot-slash-ms-recuruter/"/>
    <updated>2020-05-27T07:17:04+00:00</updated>
    <id>http://blog.shem.dev/blog/2020/05/27/dear-mr-dot-slash-ms-recuruter</id>
    <content type="html"><![CDATA[<p><em>Hope you are doing well these days.</em></p>

<!-- more -->


<p><strong>TL;DR: If most of the messages you&rsquo;re sending to candidates look something like this, you probably want to read the rest of the post:</strong></p>

<blockquote><p>Hi X, what&rsquo;s up?</p>

<p>I&rsquo;m Y from Company Z.</p>

<p>I am not sure if you have heard of Company Z, but we have been yada yada yada. We also do this and that. We&rsquo;re big and stable company that always doing new things. We&rsquo;re working hard and care about work-life balance.</p>

<p>I would love for us to connect and talk about a new job opportunity that matches your profile. Here&rsquo;s a completely random list of things that we need from a perfect candidate.</p>

<p>Would you be interested in learning more about this position? I would be happy to get your phone number to talk and explain more.</p>

<p>Thanks,
Y.</p></blockquote>

<hr />

<p>In the past 6 months, I had the pleasure to get many messages on LinkedIn. I contribute it less to my skills and more to the hundreds of articles the media wrote about my workplace- WeWork.</p>

<p>As a software engineer, LinkedIn is the only social network that I actually get messages from others, and I would lie if I say it doesn&rsquo;t flatter me. Having said that, 99% of the messages that I got are not relevant and are pretty much a waste of time for both sides. Nevertheless, I still try to answer most messages kindly and professionally.</p>

<p>I think, that with a couple of easy steps, recruiters can improve their approaches to candidates (and maybe skip on the ones that are not relevant). This way they can save time and have a better chance to close the deal with candidates.</p>

<p>Some of the things that I&rsquo;m going to suggest may sound silly, but from my experience, recruiters often fail there. It&rsquo;s also might seem very time consuming, but in my perspective, it&rsquo;s better to send 1 good message than 5 generic ones.</p>

<p>I divided my tips into 3 categories, so take a pen and paper and make sure you follow:</p>

<h2>1. Professional</h2>

<h4>Don&rsquo;t misspell my name</h4>

<p>Starting with what seems like an easy one. Come on, it&rsquo;s right there in my profile, just copy and paste, it&rsquo;s just four letters and it&rsquo;s not even French. How hard could it be?!</p>

<p><img class="center" src="http://blog.shem.dev/images/posts/recuruters/1.png" title="&amp;#34;Hi Shaham&amp;#34;. My name is Shem =(" alt="&amp;#34;Hi Shaham&amp;#34;. My name is Shem =("></p>

<h4>Use the right terminology</h4>

<p>I know, engineers have so many acronyms and phrases that normal people can&rsquo;t follow. And I know that many times you just copy and paste what you got from the hiring manager. But there are times when what you write doesn&rsquo;t make sense. Please go over the technical parts with the hiring manager and make sure your phrasing makes sense</p>

<p>In my previous job every couple of months, the hiring team had 101 sessions with someone from the engineering department about basic stuff and terms. It helped them to have a basic discussion and moreover - confidence, when texting, taking on the phone, or when they&rsquo;re on a booth at a conference.</p>

<p>And for the ones that are working in non-English speaking markets - please use English (at least for the technical terms).</p>

<h4>Be formal</h4>

<p>I don&rsquo;t expect you to open every message with &ldquo;Dear X&rdquo; or use words like <a href="https://en.wikipedia.org/wiki/Longest_word_in_English">pneumonoultramicroscopicsilicovolcanoconiosis</a>, but opening your note with &ldquo;What&rsquo;s up bro&rdquo; or &ldquo;yo man&rdquo; isn&rsquo;t the best way to make me want to continue reading.</p>

<p><img class="center" src="http://blog.shem.dev/images/posts/recuruters/2.png" title="&amp;#34;What's up Shaham&amp;#34;. I don't even..." alt="&amp;#34;What's up Shaham&amp;#34;. I don't even..."></p>

<h4>Keep it short</h4>

<p>If you&rsquo;ll write too much, people will just skim over the text. Polish the core of your offer and let the other side ask for the relevant items if needed.</p>

<h4>Show some empathy</h4>

<p>There are times you approach candidates after bad news or crisis in their workplace if this is the case and you choose to mention the situation at that company please be sensitive about it. This is not the best feeling for anyone to be in a sinking ship, especially when he has many friends there.</p>

<h2>2. Relevant</h2>

<h4>Know the candidate</h4>

<p>I know you&rsquo;re aiming to reach as many candidates as possible, and if you&rsquo;ll need to research each one of them it won&rsquo;t end. But I think that investing a couple of minutes before sending a message can actually save you time. By sending a more tailor-made request that will speak better to the person - the engagement will just be higher.</p>

<p>Even if you don&rsquo;t have time to do a small research about each candidate, there are general things that people care about when they&rsquo;re thinking about their career. <a href="https://hired.com/state-of-software-engineers#coding">For example</a> the #1 reason most software engineers chose their career is &ldquo;new challenges and continuous learning&rdquo; beating &ldquo;earning potential&rdquo;. Their #1 goal in the next 10 years: continue building cool things. Focus on those things and how these correlate with your company.</p>

<h4>Know what the company is looking</h4>

<p>You should also do the opposite research - about what the company currently needs, especially if you&rsquo;re working in an agency and don&rsquo;t work in the company. A few question that you can ask the hiring manager:</p>

<ol>
<li><p>What requirements are defiantly a must? Not the &ldquo;I need a React developer, but Angular is close enough&rdquo;. Also not &ldquo;X years experience with Y&rdquo;, years of experience don&rsquo;t mean seniority. Tell me exactly what you need.</p></li>
<li><p>Do you prefer someone with specific knowledge or you prefer someone that can learn new things?</p></li>
<li><p>Are you looking for someone with a tracked record or a junior that will grow with the company?</p></li>
<li><p>Do you need someone that is hands-on or more high level?</p></li>
</ol>


<p><img class="center" src="http://blog.shem.dev/images/posts/recuruters/3.png" title="ALL THE BUZZWORDS (and more)" ></p>

<h4>Show me</h4>

<p>Every company says that they are working on the latest frameworks, with cutting edge technologies. It&rsquo;s nice that you know to work hard but to be aware of the work-life balance of their employees. Instead of throwing words in the air, show me. Attach some useful links to your blog describing cool things that you built, point me to resources that support your culture.</p>

<h2>3. Unique</h2>

<h4>Don&rsquo;t copy &amp; paste</h4>

<p>Please, you can easily spot a canned message that you just copy and send to everyone. Not to mention the times that you forgot to remove the &ldquo;CANDIDATE NAME&rdquo; filler, or the times that you sent me the same message after a couple of weeks. I don&rsquo;t expect you to sit and write a new message from scratch every time, but at least change the 2–3 opening sentences.</p>

<p><br /></p>

<div class="row">
  <div class="column"><img src="http://blog.shem.dev/images/posts/recuruters/4.png"></div>
  <div class="column"><img src="http://blog.shem.dev/images/posts/recuruters/5.png"></div>
  <div class="column"><img src="http://blog.shem.dev/images/posts/recuruters/6.png"></div>
</div>


<h4>Why your company is different</h4>

<p>I&rsquo;m sure your company is special, I want to believe that every company is special in its way. Think about what makes it one of a kind and how it&rsquo;ll align with the candidate. Because in the end of the day people want to feel special.</p>

<p>Also - be honest with yourself and what you bring to the table. There&rsquo;s no way that your company is perfect, that it&rsquo;s a startup that gives the employees the time to explore new technologies and has many mentors that help them grow. Or the other way around - that this is a big corporate that everyone has a ton of impact. This just can&rsquo;t be the case and every time you write it just hurts your credibility.</p>

<h4>Stand out</h4>

<p>You want to somehow attract attention and not just be one of the many messages in the candidate&rsquo;s inbox. Keep in mind that this is important but can also be dangerous. There&rsquo;s a thin line between standing out and trying too much. Also, like you, many people read posts like this and in the end of the day all the messages look the same, so you need to keep an eye and refresh it from time to time.</p>

<hr />

<p><em>To summarize, your approach should be professional, relevant, and unique. This will give you superior results when talking with candidates and also save you precious time.</em></p>

<p><em>If you liked this post, I&rsquo;d love to tell you more. Would you like to schedule a short call? (Or just leave a comment here)</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Three great startups I could build if Google would give me access to their data.]]></title>
    <link href="http://blog.shem.dev/blog/2019/05/03/three-great-startups-i-could-build-if-google-would-give-me-access-to-their-data/"/>
    <updated>2019-05-03T14:06:12+00:00</updated>
    <id>http://blog.shem.dev/blog/2019/05/03/three-great-startups-i-could-build-if-google-would-give-me-access-to-their-data</id>
    <content type="html"><![CDATA[<p><em>(It’s actually my data. Just saying.)</em></p>

<!-- more -->


<p>I love Google; I use their products every day. Besides the search engine, I love Google Photos, I have an Android phone, and I use Gmail (RIP Inbox), Maps, Docs, Slides, Sheets, and many more.</p>

<p>On the other hand, I’m an engineer, and I love building products, especially ones that make my life easier. That’s why I created an <a href="https://play.google.com/store/apps/details?id=org.bill.splitter">app to split the bill</a> between friends when sitting in a restaurant, or a <a href="https://expense.shem.dev/">web app to track my expenses</a>. In the past couple of years, I had many ideas about cool features that I could use in all those products I’m using. I could wait for the relevant product managers to build those features in the corresponding products, but you know what it’s like with Google’s product managers:</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Google interviewer: what do you do when a product—<br>PM candidate: SHUT IT DOWN<br>GI: THAT IS CORRECT SOMEONE MAKE A JOB OFFER TO THIS MAN</p>&mdash; Florent Crivello (@Altimor) <a href="https://twitter.com/Altimor/status/1113641671353192449?ref_src=twsrc%5Etfw">April 4, 2019</a></blockquote>


<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>So basically I was alone here, and I needed (and also wanted) to build those tools by myself.</p>

<p>But building a new product is hard. Not because you need to write the code from scratch — that’s usually the easy part. It’s hard because you need to find a user base, to teach them how to use your product, to build the right interface and make sure they won’t leave. That’s why it’s easier to write your thoughts on Medium and not open your own blog, or open a Facebook page for your business instead of maintaining a dedicated website with chat and notifications and all.</p>

<p>In my example, as an engineer who wants to build stuff, the equivalent for that is using other product’s data and user interface. For example, instead of using a dedicated app to back up my good photos — I use <a href="https://ifttt.com/">IFTTT</a> to upload every photo that I post to Instagram directly to Dropbox.</p>

<p>As mentioned before, because I’m using many Google products in my day-to-day life, I thought I could leverage those apps to build some helpful products (for me) based on them.</p>

<p>Here’s a partial list of ideas I had lately and after some research, I understood pretty quickly that it’ll be hard to do with the current options I have in hand.</p>

<p><em>A note: All these product names are WIP. I’m better at engineering than I’m at marketing.</em></p>

<h2>1. Commute Optimizer</h2>

<p>As someone who spends almost 2 hours commuting each day, this is a big aspect of my life that I would love to optimize. You might not know it, but if you have the Google Maps app on your phone, <a href="https://www.apnews.com/828aefab64d4411bac257a07c1af0ecb">it tracks every step you make during the day</a>, whether you drive to work or go to your supermarket on the next block to buy some milk.</p>

<p>You can like it or not, but this is the price you pay for using Google Maps (or Google in general). I for one, feel that it’s a reasonable price to pay, given the tremendous help I get from those apps and how much more comfortable my life is with Google.</p>

<p>So putting privacy concerns aside, the data is there, and <a href="https://www.google.com/maps/timeline">you can see it</a>. But what can you do with it (aside from getting tailor-made ads)?</p>

<p>What if I could take all this data, process it, see some patterns and understand what is the best time for me to leave home to catch the bus to work or when to leave home when there’s less traffic? The Google Maps app already has a couple of years of data and running a simple algorithm (that also learns and gets feedback) and can give me some good insights.</p>

<h4>Why can’t I do it?</h4>

<p>So the idea is pretty simple, right? The only problem is the data isn’t easily accessible. There’s no API for your timeline and the only way to get it is to <a href="https://takeout.google.com/settings/takeout/custom/location_history?pli=1">download a huge JSON file</a>. This is definitely not the optimal way for a third party app to pull this data, and also the data won’t update, so the app isn’t able to improve.</p>

<p>Moreover, the data Google exports for you is the raw locations. Right — the raw data gives you more options to do whatever you want, but Google already does the calculations and gives you great insights about when you walked and when you started driving —if Google gave you <strong>this</strong> kind of data, this would be a much easier way to work with the data!</p>

<h2>2. “On This Day” Wallpaper</h2>

<p>I already talked about Google Photos and how much I love it. As someone who worked for a couple of years on a gallery app, I admire the people in Google that are working on this product. They are doing a fantastic job both on the product side and on the technical side, plus — the UI is slick, elegant and straightforward.</p>

<p>That’s why ALL my photos are in Google Photos (and on a physical hard drive, just in case). Same for my wife.</p>

<p>So how cool would it be if every day, I could have different wallpaper, remind me something great from the past? I could get a photo of my wife and I and our two children (or a subset of this group) that was taken on the same day a couple of years ago and have a nice small moment every day. The app would change the wallpaper every day (or a couple of times a day if there are a couple of photos).</p>

<h4>Why can’t I do it?</h4>

<p>This idea actually came to me when Google announced the new Photos API a few months ago. I immediately started building an app and playing with the API to see what I can do.</p>

<p>The plan was to get all the different people shown in your library’s photos, just like Google Photos has when you start searching, then let you pick a couple of people that you want to get their photos. From there I would run every day and select the pictures with those people on specific dates.</p>

<p>Sounds relatively simple right?</p>

<p>That was until I figured out the API might give you some interface to <a href="https://developers.google.com/photos/library/reference/rest/v1/mediaItems/search#ContentCategory">query photos with people</a> but doesn&rsquo;t give you an option to play with the actual people that are in the picture (that’s the difference between <a href="https://en.wikipedia.org/wiki/Face_detection">face detection</a> and <a href="https://en.wikipedia.org/wiki/Facial_recognition_system">face recognition</a>). On top of that, the team even said that they <a href="https://issuetracker.google.com/issues/80089805">wouldn’t support it</a> in the future.</p>

<h2>3. Words practice</h2>

<p>As you probably notice d— English is not my native language. Therefore I’m using Google Translate a lot when I’m reading and don’t understand a specific word or when I’m writing and don’t know what is the right word is.</p>

<p>Google Translate is great because it’s available on all platforms — whether I’m writing a document on my desktop, reading an email on my Android phone or reading an article on my iPad. It also has a simple UI and useful features like the word’s full definition, frequency of each translation, synonyms and listening.</p>

<p>What if I could use Google to build an <a href="https://en.wikipedia.org/wiki/Anki_%28software%29">Anki</a> app that would use <a href="https://en.wikipedia.org/wiki/Spaced_repetition">spaced repetition</a> to help me learn and memorize the words I constantly forget. It could also help me enrich my vocabulary by suggesting new words related to what I usually use.</p>

<h4>Why can’t I do it?</h4>

<p>The only API Google provides here is to translate words. This is great, but this is not what I’m looking for. I’m looking to get my own data and usage on the app. There’s an <a href="https://support.google.com/translate/answer/6142479">“history”</a> option in the web version, but it’s only valid for the specific session and not accessible via any API call. Another solution is to use the <a href="https://support.google.com/translate/answer/6142480">“phrasebook”</a> feature and export it, but this means I need to manually star every translation and manually export my phrasebook every couple of weeks, a very tedious process that I wish to automate.</p>

<p>Yes, there’s always the option to write a translator app on my own, Google helps me with the API, but again — I’ll need to build and maintain(!) a multiplatform app with all the important features I described above.</p>

<p>This is not a rant
I’m not blaming Google for anything here. This is their product, they invested tons of man-years, brain cycles and money to come up with those amazing products and I understand why they don’t want other people to easily use the company’s massive work for their own good. But at the same time, I think this is a great opportunity for them to grow and attract new users. Maybe this wallpaper thing will encourage more people to put all their photos in Google, or if this words app existed — I would use Google Translate and only Google Translate.</p>

<p>I also understand those product managers that want to keep the options open and maybe add those features on Google products in the future, and thus not open APIs to other developers. It&rsquo;s much better than the alternative — to pull a Twitter on other developers and deprecate APIs out of nowhere, but I genuinely think those features are so small and not really in the core of the business, so I can’t see why it would even get near those products.</p>

<p>These are not billion dollar company ideas; if there were — I wouldn&rsquo;t put them here out in the open. And for me — the best case here is that Google would just add it somehow, but since I don’t see this happening, I would love to see them offer some options on top of what they already have. It doesn’t need to be specified in the ways I described above, but generally — shift the state of mind and think:</p>

<blockquote><p>“we’re building great products, how can the community can leverage it?”</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thank you 2018]]></title>
    <link href="http://blog.shem.dev/blog/2019/01/04/thank-you-2018/"/>
    <updated>2019-01-04T13:53:24+00:00</updated>
    <id>http://blog.shem.dev/blog/2019/01/04/thank-you-2018</id>
    <content type="html"><![CDATA[<p><em>You have been good to me.</em></p>

<!-- more -->


<p>The dear year of 2018 — You’ve gone by fast, maybe too fast. A moment before saying goodbye I wanted to thank you for the lessons you gave me.</p>

<h2>1. Focus</h2>

<p>Starting from the most important lesson, the one that probably made this post being a list of only four items and not a dozen. Having two children, with significant challenges at work- I <em>had</em> to separate the important stuff from the noise. Two books mainly inspired me here (one old and one new): <a href="https://www.goodreads.com/book/show/368593.The_4_Hour_Workweek">The 4-Hour Workweek</a> and <a href="https://www.goodreads.com/book/show/38900866-it-doesn-t-have-to-be-crazy-at-work">It Doesn’t Have to Be Crazy at Work</a>.</p>

<p>I removed tons of distractions from my day to day (more about that later). First, I reduced the emails and other not urgent communications channels to strictly twice a day, 30 min each, and disabled notifications for all of them. Surprisingly enough- it’s working, and the world didn’t fall.</p>

<p>I also expanded an experiment I started the year before, and every evening I put my phone on flight mode until the next morning and putting it back on only when I’m going out of my house.</p>

<p>When I’m in a situation- I’m fully present: when I’m with my kids, I found it’s better to be there less time but with 100% of my attention. When at work I split it into two mindsets: (1) in the zone, writing, deeply thinking with my self, and (2) being there for others, tackling difficult problems, giving guidance. Today’s workspace is trying to provide one solution to both, and I don’t think it’s possible. Lucky enough- I’m working in such environment that has the answers for both- open spaces for collaboration and dedicates quite zones for isolation. So either I sit (or stand actually) in my place without earphones, putting my radar on and helping others, or blocking a dedicated time in the calendar and go work from another room or even a different building.</p>

<p>I learned (and still learning) how to put my attention on the right things and reduce the context switches to a minimum. It is an art that will boost your productivity. The secret is to do the same with less, and than add a bit to it</p>

<h2>2. Strengthen my weaknesses</h2>

<p>Until last year I focus on sharping the things I felt I was good at but not enough. When developed on Android, I dig deeper and explore new things like Kotlin at the time or how to do advanced animations. Same for public speaking- I push on talking on more events, sharpen my communication skills and get better on how to speak in front of an audience.</p>

<p>As I improved, I realized I was reaching my limit. My other weaker capabilities were holding me back, blocking my way in improving my stronger skills. There were two main areas I felt lagging behind: English and Web development.</p>

<p>Starting from the latter- as a full-stack developer that did lots of backend and mobile, I felt I was still missing the basics of web development, primarily as someone that most of the day working on React apps in my day to day and didn’t work with JS a lot during my career. So I started reading more and more blog posts about JS and React (sorry, I still <a href="http://blog.shem.dev/blog/2017/08/25/how-to-become-a-css-master/">can’t handle CSS</a> and signed for newsletters (one that I highly recommend is <a href="https://react.statuscode.com/">React status</a>). I also did what I usually do when I want to learn a new thing and <a href="http://blog.shem.dev/blog/2018/06/08/the-ultimate-guide-for-side-projects/">build a side project</a>- a web application to help me and my wife track and monitor our expenses.</p>

<p>As for my English skills- as I imagine you already noticed, English is not my native language, and it’s not natural for me to express myself in writing or by speaking. So besides reading more books in English, I decided to double down on it and took two courses (that my amazing work completely covered): Talera for writing and speaking and <a href="https://theaccentsway.com/">The Accent Way</a> to improve my accent. I’m also using this blog for practicing my writing skills, so thank you for participating in my experiment =).</p>

<p>Sometimes you need to stop or even go a couple of steps back to gain some velocity for the future.</p>

<h2>3. Sometimes you need to come back to your comfort zone</h2>

<p>I’m a big believer in trying new things and push your limits, and I already wrote that I think the magic happens <a href="http://blog.shem.dev/blog/2015/11/15/run-fast-fall-frequently-get-up-faster-and-go-drink-beer-at-the-beach-what-its-like-to-work-at-a-startup/">outside of the comfort zone</a>. But staying there too long might be exhausted. I learned it the hard way because this year I started talking in conferences abroad.</p>

<p>It actually started at the end of 2017, but in 2018 I took the leap and talked in big conferences in Europe, not in my native language. It began on <a href="https://devfest.sk/">Devfest Kosice</a> in Slovakia, then on <a href="https://www.adc.de/kongress/">ADC Festival</a> in Hamburg and lastly on <a href="https://brainbar.com/">BrainBar conference</a> in Budapest. Although I had experience in talking in front of big audiences, this was different. The combination of speaking in English, traveling for a couple of days alone, and standing on the stage without any familiar face in the crowd- was very hard for me. Very hard. So hard that I started to enjoy it less and less.</p>

<p>After the last talk, I felt overwhelmed and needed to take a break and breathe. So I took some time off and didn’t submit any talks for the rest of the year. Almost eight months have passed, and I’ve started to miss speaking in confs. Soon I might be ready to submit new talks, and hopefully, I’ll return talking and enjoying it again.</p>

<p>Being outside of the comfort zone will take plenty of energy and might be a stressful situation, just remember to come back and fill your battery before going back.</p>

<h2>4. Be conscious about the content I consume</h2>

<p>As said before, I started to be more aware to how I’m using my time. I already heavily use <a href="https://getpocket.com/">Pocket</a> in the past couple of years, but this year I started listening to podcasts too (a partial list: <a href="https://www.stuffyoushouldknow.com/podcasts">Stuff You Should Know</a>, <a href="https://www.npr.org/podcasts/510289/planet-money">Planet Money</a>, <a href="https://99percentinvisible.org/">99% Invisible</a>, <a href="https://www.gimletmedia.com/reply-all">Replay All</a>, and in Hebrew: <a href="http://extend.libsyn.com/">Extend</a>, <a href="https://www.kan.org.il/podcast/program.aspx/?progid=7">Hayot Kiss</a>, <a href="https://mayeshbeze.simplecast.fm/">Ma Yesh Beze</a> and <a href="http://notarbut.co/">No Tarbut</a>). Also, after too much time, I moved to Kindle from physical books, and that made me read much more.</p>

<p>But more important, I got rid of useless habits that took my attention too easily: I removed the Facebook app from my phone and slowly decreased the times I visit the social network, to the point that I open it only once a week. I stopped visiting websites to read the news or watch commercial TV. Instead, I only watch on-demand shows and get the news from small talk with other people.</p>

<p>Our world is full of data, noise, and content. Almost all of it is not worth your time. The most precious resource you have is your time and your attention, don’t give it for free. Treat your mind as your body and don’t feed it with junk food.</p>

<h1>A look forward</h1>

<p>I want to use my time more wisely; I want to do the same with less and get more time to explore new things; I want to get excited again when seeing the crowd from the stage side; I want to push the right limits.</p>

<p><strong>2019, we can do it.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[30 lessons for my 30th birthday, learned from my (many) mistakes.]]></title>
    <link href="http://blog.shem.dev/blog/2018/10/12/30-lessons-for-my-30th-birthday-learned-from-my-many-mistakes/"/>
    <updated>2018-10-12T13:40:05+00:00</updated>
    <id>http://blog.shem.dev/blog/2018/10/12/30-lessons-for-my-30th-birthday-learned-from-my-many-mistakes</id>
    <content type="html"><![CDATA[<p>Last month was my 30th birthday. I’m not an emotional guy that loves to celebrate his birthday, and I don’t think there is something unique in this day. For me, it’s just 10950 days since I was born, nothing special.</p>

<!-- more -->


<p>Anyway, since many of my friends think (and most of the people in the world apparently) it’s an important date, I thought it might be worth to take a moment and observe what I’ve learned in the past not-so-long-but-also-not-so-short period, just a reminder for me to not repeat the hundreds of mistakes I did.</p>

<p><em>*this list is not on any order, it was random and shown by the order that it came in my mind in the last couple of weeks.</em></p>

<h3>#1: Don’t listen to stupid lists on the internet</h3>

<p>“10 things every successful people knows”, “5 habits for helping you become a millionaire”, “30 pieces of advice from a pretty normal guy”. Everyone thinks he figured life out, that’s probably not the case because everyone has their way of doing things. Getting inspiration from other people is great- but try to find what exactly works for you, it’s probably not the same for others.</p>

<h3>#2: Read, but for real.</h3>

<p>People nowadays barely read more than two paragraphs. This is the point where most people’s (from the ones that even started) eyes will start itching, and they will lose it. Don’t be like this, there are few articles worth reading, but if you find something interesting- take the time and read it slowly. Give the author the respect he deserves.</p>

<h3>#3: Your immediate family is the most important thing you have in life</h3>

<p>Those are the ones you are waking up with every morning and go to sleep near them every night. Those will (hopefully) be with you during all your life no matter what you’ll do or where you’ll be. For good and bad.</p>

<h3>#4: Fight to preserve connections, but not too much</h3>

<p>There are close people that your relationship with them might have a bad impact on your life or mental health, or it’s simply taking too much energy from your side, and you’re not getting anything back. Drop it, it probably not worth it.</p>

<h3>#5: Learning is an ongoing effort</h3>

<p>You don’t finish your learning phase in high school or college; learning is not just a phase in life, it happens all the time. Furthermore, those places need to prepare you for the actual learning in real life. Learn how to learn, this is how you’ll hack life for the long run.</p>

<h3>#6: If you aren’t going forward- you’re going backward</h3>

<p>We live in times where everything is going at such a fast pace. Things that you learned in your Bachelor degree are probably already outdated. Did you learn how to do a certain thing two years ago? There’s probably a better way to do it now. Keep on going.</p>

<h3>#7: The magic happens outside your comfort zone</h3>

<p>Get out, try things, push yourself, push others, this is less scary than you imagine. There’re lots of stuff that you can’t experience in your comfort zone or will just take too much time to learn.</p>

<h3>#8: To feel the ground, go down</h3>

<p>The one who sits in the front desk knows much more of the other people about what happens in the day-to-day. Do you want to know if people in your company are stating to burn out? Ask the cleaners- they’re the ones in the office at 8 am or 8 pm.</p>

<h3>#9: Go say “hi” to the new guy</h3>

<p>Remember when you’re the new guy? That was pretty scary. So go and ask the one that eats alone at his table if he or she wants to join you, they will remember it.</p>

<h3>#10: People hate awkward silence</h3>

<p>If you pause enough time during a conversation, the other side will start talking. People LOVE talking, especially about themselves.</p>

<h3>#11: One on one is the best way to get to know people</h3>

<p>I didn’t yet find one person that I sat with him alone that I hate him afterward. Talk with people enough time, ask him questions, get interested and I bet you’ll find something interesting about him that you can learn from.</p>

<h3>#12: Consistency is the key to improvement</h3>

<p>The only way to get better in order of magnitude is by improving by little every day for a long time. Jerry Seinfeld had a great method to write better jokes- he wrote one joke every single day. It doesn’t matter how funny the joke was- as long he came up with a new one every day, no matter what happened that day. After doing it for enough time, all he had in mind is <a href="https://jamesclear.com/stop-procrastinating-seinfeld-strategy">“Your only job is to not break the chain.”</a></p>

<h3>#13: It won’t be as bad as you imagine (neither as good)</h3>

<p>The worst thing you can think about a particular situation (moving to another city, talking in front of an audience, getting fired), will probably won’t be that hard in reality. The same thing also for the best case. So calm down.</p>

<h3>#14: When hard times come- people looking for God</h3>

<p>Or something similar to God, or something they consider as God. The French philosopher Pascal’s Wager argued that a rational person should live as though God exists and seek to believe in God, it also has some comfort.</p>

<h3>#15: A favor is worth much more than a couple of bucks</h3>

<p>Try to do things for others without any material incentive, just help them. When money is involved, and you’ll need their help in the future- they will be able to ask some amount of money depends on how much money they paid, but favors are like comparing apples to oranges, and people will be more generous in this case.</p>

<h3>#16: Guided imagery is real</h3>

<p>When facing a hard problem — stop and take a moment to plan how exactly you’re going to solve it. Imagine you actually address the thing, step by step and how you’re going to overcome any obstacles along the way. Only then start.</p>

<h3>#17: Be polite</h3>

<p>Say “Thank you” and “Welcome,” smile, be kind, even if the other side not cooperate. In most cases, it only needs the right word to make a challenging situation to be a pleasant one.</p>

<h3>#18: Hard things just look easy</h3>

<p>When you see someone nailing it on the stage, feeling light, that seems like he was born to do it, and they’re giving a 30 minute performance so naturally — this is just because they practice the hell out of it for at least 100 hours and could not eat anything since breakfast because they’re so stressed.</p>

<h3>#19: Stop wasting time watching TV</h3>

<p>There’s plenty of great content out there; TV is 99% shit that aims for the least common ground and acts as a filler for commercials.</p>

<h3>#20: Facebook does not reflect real life</h3>

<p>For 99% of the people in 99% of the time- life is just dull moments, daydreaming, staring at the air and nothing to write about. Facebook feed is a collection of all the best moments of some people (and a ton of ads in between). So you can stop the feeling of “everyone doing some pretty cool things all the time, while I’m sitting in my pajamas doing my best becoming a couch potato.”</p>

<h3>#21: Put down the camera</h3>

<p>You can’t capture magic moments in life with the camera (ok, some people can, but 99% can’t), so please stop wasting time on these precious moments for taking dozens of pictures you’ll never watch. Take a snapshot in memory; it will look much better.</p>

<h3>#22: Learn how to express yourself</h3>

<p>A language is a fantastic tool; it’s like plasticine that you, the writer, can shape. You can excite or hurt the readers just by picking the right words. It can be played like music that can make your eyes run fast to follow the words to see what’s going to happen at the end of the sentence. Or to slow down, taking the time to understand. The ability to describe a situation and to make the reader actually feel the words is a powerful skill. Read, learn new words, practice writing.</p>

<h3>#23: Learn by doing</h3>

<p>At the end of the day, this is the only way to acquire a new skill; you can’t avoid this.</p>

<h3>#24: Surround yourself with the right people</h3>

<p><a href="https://www.businessinsider.com/tim-ferriss-average-of-five-people-2017-1">You are the average of the five people you most associate with.</a> Putting yourself in situations where you’re the smartest one in the room might make you feel great, but it won’t take you anywhere. Analyze what you should get better at and find the right people that will take you there.</p>

<h3>#25: Find mentors (and keep them close)</h3>

<p>Mentors are like gold in a world where you want to keep getting forward. Find great mentors and don’t even think about letting them go until you learn from them everything you need.</p>

<h3>#26: Step 0 for improvement: measure</h3>

<p>You can’t trust a gut feeling. When it comes to growth — numbers are the keys. By measuring you’ll know what the low hanging fruits (and there probably are) and how to make quick wins. A before and after graph/ image/ sheet is what will motivate you along the way.</p>

<h3>#27: No one is perfect</h3>

<p>My aunt used to say that there is a toilet in every house. Everyone has aspects that are not as good as you think. Every couple has some hard times, and every child has its own problems. Stop thinking that the grass is always greener on the other side of the fence, not even on this family that upload a story from Thailand just now.</p>

<h3>#28: You deserve it</h3>

<p>A second after you’ll get promoted, at the moment you’re going into the stage, at the exact point that you’ll be in the top of your life- a little voice inside of you will wake up and say that you’re not that good and everyone is going to find out that you’re just an imposter. Shut it down and ignore, everyone is facing this impostor syndrome, you got here because of you, and you well deserved to be here.</p>

<h3>#29: No one cares that much about you</h3>

<p>Not in a sense that if you’ll die no one will cry, but in the small things- if you use one word or another, how you dressed up, if there was a typo in this email you just sent or what you said in the middle of the conversation. You think everyone won’t ever forget the mistake that you did. Calm down- no one really paid attention.</p>

<h3>#30: Get bored</h3>

<p>Getting bored is something people afraid of. Don’t be scared, deal with it. Feel comfortable with the boredom, welcome the void into your brain and let your mind wonder sporadically. You’re right- it’s much easier to run away and watch another stupid video on the internet instead of worrying about your student loan, but only when you are daydreaming you actually getting into the deepness of things.</p>

<hr />

<p>That’s it for now until I’ll be 31, and hopefully will make enough mistakes to learn a new lesson.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The ultimate guide for side projects]]></title>
    <link href="http://blog.shem.dev/blog/2018/06/08/the-ultimate-guide-for-side-projects/"/>
    <updated>2018-06-08T10:28:30+00:00</updated>
    <id>http://blog.shem.dev/blog/2018/06/08/the-ultimate-guide-for-side-projects</id>
    <content type="html"><![CDATA[<p>In the last ten years or so, I made myself a habit to maintain at least one side project at every given moment. Those side projects served a couple of purposes:</p>

<!-- more -->


<ol>
<li><p>Learn new things- it can be a new technology, to experience with a new field or to acquire a new capability.
Build something- it&rsquo;s nice and fulfilling when you can show your product to others, or take a look at something and know you&rsquo;re the one that created it.</p></li>
<li><p>Refreshing- it&rsquo;s a great way to get out of your comfort zone and do something different from your day to day job.</p></li>
</ol>


<p><img class="center" src="http://blog.shem.dev/images/posts/sideproject/pexels-photo-316465.jpeg" title="Photo by Lum3n.com from Pexels" ></p>

<p>These points were are in order of importance to me. Personally, most of the times my primary goal was to learn something new. </p>

<p>There are a lot of articles about what is a side project. You can read about it <a href="https://medium.freecodecamp.org/why-side-projects-are-so-damn-important-239ba37209e">here</a> or <a href="https://medium.com/the-year-of-the-looking-glass/the-importance-of-side-projects-cf9f63954031">here</a>.
 
Here are some of my examples:</p>

<ul>
<li><p>Building a 3D model of my house- back in the day I thought about applying for a job at Pixar. So to increase my chances to get there as a software engineer I decided to learn how to work with <a href="https://www.autodesk.com/products/maya/overview">Maya</a>.</p></li>
<li><p>Building a bill splitting app- as part of exploring new fields I wanted to experience with developing a user interface product. That&rsquo;s why I created the <a href="https://play.google.com/store/apps/details?id=org.bill.splitter">BillSplitter</a> app, which later helped me get hired by a mobile startup.</p></li>
<li><p>Decorate my children&rsquo;s room- when I was young I loved drawing, but I didn&rsquo;t have time to do that since then. So I used the opportunity to learn how to how to draw with acrylic colors and sketch some stuff in our children&rsquo;s room before my older daughter came to the world (and added another one for our baby boy).</p></li>
<li><p>Write a blog- to practice my English I started to publish content regularly. I might have <a href="https://medium.com/@shemag8/when-your-story-go-viral-8a1c84ad0fdb">gone viral</a>, but my English is still not as good as I wish.</p></li>
</ul>


<p>Those just a few representative examples to give you a sense of what can side project looks like and what you can achieve. </p>

<p>Some projects can help you learn something new that relevant to your role (Android, Kotlin, Gatsby.js, etc.). Other projects can give you an option to touch aspects of your jobs that you not regularly have time to (product, marketing, design, etc.). And some projects just let you do something entirely new (write a blog, doing a talk).</p>

<p>After years of maintaining side projects, I understand that there are some elements of useful and effective side projects. If in the past I could work 10+ hours a week on a side project, now, with two small children I have only around 4 hours to work on it.</p>

<p><img class="center" src="http://blog.shem.dev/images/posts/sideproject/pen-idea-bulb-paper.jpg"></p>

<p>So I want to share with you some principles to get out the most with your time. So let&rsquo;s start:</p>

<h2>1. Decide what you want to learn</h2>

<p>Before starting building something, think what you aim to achieve from this project. What do you want to learn? What do you want to practice?</p>

<p>This should be one thing and one thing only. Sure, you might get other things along the way as well, but focus on one thing at first.</p>

<p>Setting one <strong>single</strong> goal will latter help you along the project with all kind of decision you&rsquo;ll tackle, for example: should you write tests? If your primary goal is to practice responsive design- so not, it&rsquo;s not relevant.</p>

<p>Remember- we want to get the most in the little time as possible, so we want to pay attention to what we&rsquo;re working on (and more precisely- what&rsquo;s not).</p>

<h2>2. Choose a product that you would use</h2>

<p>Next, we need to decide what we want to build. There are plenty of resources out there for ideas to side projects that you can create. Go over them to get a sense of the options you have and then ignore them altogether.</p>

<blockquote><p>Your side project should be something you (theoretically) would use.</p></blockquote>


<p>It has two reasons:</p>

<ol>
<li><p>They&rsquo;re going to be ups and downs along the way. You will have days when you&rsquo;ll be extremely excited about the project (especially on start), but there will be times when you&rsquo;ll need to find the energy to skip this new Netflix show and fix some weird bug in your project. If you aren&rsquo;t related to the thing, it won&rsquo;t stay long.</p></li>
<li><p>Most of the time you&rsquo;ll be alone here. No product manager or boss that tells you what to do. You&rsquo;ll need to figure what to do on your own, and the best way to do it is to build this thing for yourself.</p></li>
</ol>


<h2>3. Not too hard but not too easy</h2>

<p>Now when it comes to building the project, it&rsquo;s important to aim to the right level- that&rsquo;s mean not too hard for you but also not too easy. </p>

<p>That way you&rsquo;ll stay motivated along the project, and it will help you with a sense of achievement. It&rsquo;s called the Goldilocks Rule, and you can read more about it <a href="https://jamesclear.com/goldilocks-rule">here</a>.</p>

<h2>4. Break it into a small deliverable chunks</h2>

<blockquote><p>Before you start doing the thing- you should sit and plan.</p></blockquote>


<p>With as much as boring and tedious as it sounds, building a rough roadmap for the side project will help you later.</p>

<p>Those should not be significant milestones; it should be very very small checkpoints that you can achieve in every &ldquo;sprint&rdquo; (usually a week or so). </p>

<p>Here is an example for one that I can think of for a simple chat web app:</p>

<ol>
<li>setting app the environment</li>
<li>make one client work locally</li>
<li>sync data with the server</li>
<li>make the remote client work</li>
<li>styling</li>
<li>deploy</li>
</ol>


<p>Here is another one for a blog post:</p>

<ol>
<li>writing outline</li>
<li>writing section I</li>
<li>writing section II</li>
<li>writing section III</li>
<li>introduction and summary</li>
<li>adding relevant links</li>
<li>layout and image</li>
<li>publish and sharing</li>
</ol>


<p>Again, it comes to serve two purposes:</p>

<ol>
<li><p><strong>Focus-</strong> as said, you won&rsquo;t have much time here and every minute counts. You need to know exactly what you need to do and enter the zone as quickest as possible.</p></li>
<li><p><strong>Getting in and out of context-</strong> since it might be days or even weeks since you last worked on the side projects, it will be very hard for you to create a seamless continuing workflow. Continue from the exact point you stopped, and understand the context might take an hour or two. That&rsquo;s why it&rsquo;s better to close every session so you&rsquo;ll have a fresh start in the next round.</p></li>
</ol>


<h2>5. Make it a habit</h2>

<p>I learned that consistency is the name of the game, so it&rsquo;s more important to work on the side project for a couple of weeks than trying to squeeze it up for a 12 hours marathon and never come back.</p>

<p>That&rsquo;s why it was necessary for me to make the whole thing just a habit- I know exactly what I&rsquo;m doing every Friday when the clock shows 10 am: I open my mac and continue working from the last point I stopped last week.</p>

<p>Since I&rsquo;m doing the project at home, and working from home is not something that I&rsquo;m doing on my day to day- I also put my self in a state of mind of working: sitting in a specific place, with a particular setup.</p>

<p>That way I&rsquo;m entering a work mode easily without really thinking what should I do now or whether this is the right time or place to work on the side project.</p>

<p>I also try to keep that habit for as many straight weeks as possible, even for just an hour. I found it that when I&rsquo;m starting to miss even one time- it&rsquo;s a slippery road from there to skip it for more and more weeks later. You can read more about it <a href="https://jamesclear.com/stop-procrastinating-seinfeld-strategy">here</a>.</p>

<h2>6. Perfection is your enemy.</h2>

<p>When the times goes by it&rsquo;ll be easy sometimes to go down the rabbit hole because you want to change some text font or waste your time chasing a small bug- <strong>don&rsquo;t let that happen!</strong></p>

<p>Remember that we want to achieve as much as we can in the little time possible, so always remind yourself what you&rsquo;re here for and focus on the important stuff.</p>

<p><a href="https://medium.com/personal-growth/give-yourself-permission-to-screw-up-2c5f55e9b9e6">Done is better than perfect</a>, and you should keep the wheel spinning. </p>

<p>It&rsquo;ll help you with the sense of accomplishment. The worst thing that can happen to you is to wake up after 5 hours session to realize you just spent the whole day <a href="https://seths.blog/2005/03/dont_shave_that/">yak shaving</a> without really making any progress.</p>

<p><img class="center" src="http://blog.shem.dev/images/posts/sideproject/building-joy-planning-plans.jpg"></p>

<hr />

<p>Side projects are an excellent opportunity to acquire new skills and experience in stuff that you not usually have the chance to do on your day-to-day.</p>

<p>As with anything new- it&rsquo;s probably easier to keep up on start when you&rsquo;re still excited, the secret is how you maintain this feeling and make this excitement lasting even on times that you feel tired.
Hopes those tips will motivate you building great products and learn something new.</p>

<hr />

<p><strong>If you enjoyed this post, please hit the &ldquo;recommend&rdquo; button below and share this story with your friends. I&rsquo;ll also love hearing about any other tips that you have or any cool side project that you&rsquo;re currently working on. Thank you!</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to become a master in CSS in 5 simple steps]]></title>
    <link href="http://blog.shem.dev/blog/2017/08/25/how-to-become-a-css-master/"/>
    <updated>2017-08-25T12:52:26+00:00</updated>
    <id>http://blog.shem.dev/blog/2017/08/25/how-to-become-a-css-master</id>
    <content type="html"><![CDATA[<p><a href="https://blog.shem.dev/blog/2017/03/31/5-things-i-learned-as-an-android-developer-after-doing-some-web-development/">As you know</a>- I lately left my comfort zone, closed Android Studio and dive straight into a scary, rough sea called Web Development.
An integral part of building web apps is working with CSS. For the ones that not familiar with Cascading Style Sheet- this is how web developers design their web pages, give it some life and structure, add animations and lose their sanity while doing so.</p>

<!-- more -->


<p>In this post, I&rsquo;ll try to describe what it takes for one who wants, for a reason I can&rsquo;t understand, to become a master in CSS in 5 simple steps:</p>

<h2>1. lose your intuition</h2>

<p>So you just need to add one more button to the end of the form, how hard it can get, right? No, PLEASE DON&rsquo;T SAY RIGHT!</p>

<p>CSS not like the right side, it will always prefer left. Because when you&rsquo;ll add <code>float: right;</code> something wrong going to happen. Some elements will change their positions; some divs will go over each other; some old versions of IE going to display your page upside down. Why? I don&rsquo;t know.</p>

<p>How to solve it? You probably need to add <code>overflow:hidden</code> to the parent element (or adding dummy div to clear floating, of course). Why? Again, I don&rsquo;t know.</p>

<p>This is how CSS works, you think it supposes to work on one way, but you&rsquo;re usually wrong.</p>

<p><img class="center" src="http://blog.shem.dev/images/posts/graphs/css.png" width="500"></p>

<h2>2. Practice meditation regularly</h2>

<p>To continue with the previous part- when dealing with CSS, lots of things won&rsquo;t work as expected. You can try to understand the logic behind it, but most of the time it&rsquo;s just a waste of time.</p>

<p>So what I recommend- before each day you know you are going to work on styling your page, take a couple of minutes and let your body and mind relax. Meditate with this in mind: &ldquo;this going to be hard, this going to be rough, but this is just software, and I won&rsquo;t let this non-deterministic system getting on my nerves.&rdquo;</p>

<p>This, combining with removing any sharp objects away from your desk, can make your life (and your team&rsquo;s life) much more peaceful.</p>

<p><img class="center" src="http://blog.shem.dev/images/posts/css/css1.gif" width="300"></p>

<h2>3. Don’t refresh your page. Ever.</h2>

<p>When working with CSS, you&rsquo;re getting used to working straight on the browser, in that way you can easily play with your elements properties and get immediate feedback.</p>

<p>But while a non-experienced developer will lose all his changes when accidentally refresh the page, a CSS master will know that refresh button is forbidden. Especially not before showing the result to the product manager.</p>

<p>I have a theory that that&rsquo;s how SPA was invented.</p>

<p><img class="center" src="http://blog.shem.dev/images/posts/css/css3.jpg" width="300"></p>

<h2>4. Subscribe to some newsletters.</h2>

<p>Web development is a rapid pace changing environment. Frameworks change quickly, every week there&rsquo;s a new shiny library and new concepts introduced on a weekly basis.</p>

<p>The best way to be on top of new tools and ideas is to subscribe to one or more newsletters.</p>

<p>In that way, you’ll able to say things like: &ldquo;Oh you&rsquo;re still using Flexbox? I just use to work with CSS grid now; it&rsquo;s the new shit” when your PR completely messed up the page layout, and you don&rsquo;t know why.</p>

<p><img class="center" src="http://blog.shem.dev/images/posts/css/css4.png" width="300"></p>

<h2>5. Work on your persuasion skills.</h2>

<p>One day your designer will come to you with a crazy UX concept that you absolutely have no idea how to implement. But you&rsquo;re a CSS master, and masters can&rsquo;t admit they don&rsquo;t know how to do something.</p>

<p>So what can you do? You drive him out of this:</p>

<blockquote><p>"Oh, we can't animate it because it will break our site accessibility."</p></blockquote>


<blockquote><p>"Floating views are just looking bad on mobile, believe me."</p></blockquote>


<blockquote><p>"Material cards? Are we still in 2015?!"</p></blockquote>


<blockquote><p>"Pffff, like Facebook?! They're putting their CSS in their JS! Those guys are crazy!!"</p></blockquote>


<p>Continue with this until he is ok with your standard Bootstrap starter template website.</p>

<p><img class="center" src="http://blog.shem.dev/images/posts/css/css2.gif" width="300"></p>

<hr />

<p><em>Afterword: this post is sarcastic, and I admire each one and one of you out there that can align a text properly right next to the thumbnail just like the designer meant it to be.</em></p>

<hr />

<p><strong>If you enjoyed this post, please hit the “recommend” button below and share this story. I’ll also love hearing your comments. Thank you!</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 things React world can learn from Android]]></title>
    <link href="http://blog.shem.dev/blog/2017/07/02/5-things-react-world-can-learn-from-android/"/>
    <updated>2017-07-02T18:52:47+00:00</updated>
    <id>http://blog.shem.dev/blog/2017/07/02/5-things-react-world-can-learn-from-android</id>
    <content type="html"><![CDATA[<p>In my <a href="https://blog.shem.dev/blog/2017/03/31/5-things-i-learned-as-an-android-developer-after-doing-some-web-development/">previous post</a>, I talked about a couple of things I notice after moving from my usual gig as an Android developer and doing some web development (especially React).</p>

<p>As promised, after naming some things that Android can learn from the web development world, I will now focus on the other side- what can web developers can borrow from the Android world.</p>

<!-- more -->


<p>So lets start <em>(Putting my helmet on)</em>:</p>

<h2>1. A decent IDE</h2>

<p>Oh yes, I&rsquo;m touching a nerve right off the bat. But sorry, there is no way around it.</p>

<p><strong>Web developers have no decent IDE, and they should use one.</strong></p>

<p>We have excellent text editors, but it&rsquo;s not the same.</p>

<p>Why the hell should I write my imports manually? How can I refactor my code peacefully when I&rsquo;m not sure I renamed ALL the instances of my method? Why can&rsquo;t I navigate easily in my source code?</p>

<p>As a one that came from a world with a great IDEs (Java with Eclipse and IntlliJ), this is the thing that bothers me the most when I develop.</p>

<p>Google took it to the next level, and they have a team that is working just on the developer tools for Android. I do not say we have to use a dedicated IDE like Android Studio, but at least give me something decent to work with.</p>

<h2>2. Stop with those fucking to-do list apps</h2>

<p>No really, WTF!? How many to-do list apps a man needs? Why is everyone writing the same thing over and over?</p>

<p>Yeah, we got it- you write your tasks, and it saves on Redux, and you can finish some tasks and then can see the ongoing ones and the ones that you finish. I swear I saw things kind of apps like 5 different times while learning React.</p>

<p>What about going to the next level- see how to sync data with the server, putting more than one type of data, handling user input, loading or any other edge case.</p>

<p>Google builds real apps and releases the source code. For example- <a href="https://github.com/nickbutcher/plaid">Plaid app</a> that focus on design and animation, or <a href="https://github.com/nickbutcher/plaid">Muzei app</a> for working with images, or even the <a href="https://github.com/google/iosched">official Google I/O app</a>.</p>

<p>Those are real apps with real users and real use cases. It is interesting how experienced developers handle apps with more than a couple of hundreds of lines of code.</p>

<h2>3. Community Experts</h2>

<p><a href="https://developers.google.com/experts/about">Google Developers Experts (GDEs)</a> are a global network of experienced developers (and others) actively supporting developers, startups and companies changing the world through web and mobile applications.</p>

<p>That&rsquo;s mean that Google is encouraging (and also compensating) individuals to help and educate the community about Android.</p>

<p>Think about yourself- what if you have a question, or something don&rsquo;t work, or need some kind of advice. Whom do you ask (or where)?</p>

<p>Helping the community working with the platform is an integral part of developing a new platform, and I feel that Facebook can do better here.</p>

<h2>4. Talk about more than just code.</h2>

<p>React is relatively straightforward. You can easily get an app up and running in a few hours. However, a real app is more than just a couple of screens and components- it is much more than that. It is deal with bizarre user inputs and handling connections errors. It is making the user understand the flow and making actions easy and intuitive.</p>

<p>I would love some bits of advice from the Facebook team about lessons learned after building React apps for such a long time and for so many users and use cases.</p>

<p>Just like Google sharing things like <a href="https://developer.android.com/design/index.html">material design</a> guidelines, I would love to hear more about best practices when coming to build my single page app.</p>

<h2>5. Work on architecture components (or adapt community solutions as best practices)</h2>

<p>So we have the basic stuff, the bare bones of the app and soon enough we&rsquo;re going to write to high order components to handle the more high-level stuff.</p>

<p>And those components will probably move with us (as a shared lib or worse- as a copy &amp; paste) to our next project.</p>

<p>And we&rsquo;re not alone- so I assume others are written this code on their own projects.</p>

<p>Because I&rsquo;m not the only one that needs to write a component that handles the state when my component&rsquo;s data is currently loading. And I&rsquo;m probably not the only one that sometimes wants to sync some values between the store and the local storage. Or animate components.</p>

<p>In Android, it&rsquo;s known that Retrofit is the library for HTTP calls, Google even uses it in their <a href="https://developer.android.com/topic/libraries/architecture/guide.html#fetching_data">official examples</a>. For other things, they came up with their own solutions like <a href="https://developer.android.com/topic/libraries/architecture/index.html">architecture compoennts</a>.</p>

<p>In react there is <a href="https://github.com/reacttraining/react-router">React router</a>, that is widely used. But beside of this- I&rsquo;m not really aware of this kind of things.</p>

<hr />

<p>I really like the web development world, and I feel that the community is much more involved (and bigger to be honest). But I feel this is the place where one should get up and lead the developers to more organized and structured environment.</p>

<hr />

<p>If you enjoyed this post, please hit the “recommend” button below and share this story. I’ll also love hearing your comments. Thanks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Is there Room for one more?]]></title>
    <link href="http://blog.shem.dev/blog/2017/06/02/room-performance/"/>
    <updated>2017-06-02T12:26:09+00:00</updated>
    <id>http://blog.shem.dev/blog/2017/06/02/room-performance</id>
    <content type="html"><![CDATA[<p>In the last Google I/O, Google announced a new <a href="https://developer.android.com/topic/libraries/architecture/index.html">architecture components</a>. One of them is Room.
Room is an (another) ORM solution for the Android developers. Combining with some other elements Google released (like LiveData, ViewModel, and Lifecycle Listeners)- basic app flows should be much simpler.</p>

<!-- more -->


<p>Indeed- Google did some nice work here. Straightforward tasks like displaying items from DB and update them was a pain, and you had to write a lot of code over and over. <a href="https://medium.com/proandroiddev/clean-easy-new-how-to-architect-your-app-part-1-e439668a523d">Now you can just use those out-of-the-box components</a>. This will save time for developers: you will write less code, and you will have fewer bugs.</p>

<p>When examine those components, I feel most of them bringing new things to the table. But about <a href="https://developer.android.com/topic/libraries/architecture/room.html">Room</a>- is there a need for another ORM library?</p>

<h2>ORM?</h2>

<p>Let&rsquo;s start from the beginning. For the ones that not familiar with, ORM stands for &ldquo;Object Relational Mapping&rdquo;. That&rsquo;s a prettier way to let the developers works with persistent objects instead or tables rows.</p>

<p>That&rsquo;s mean that if I want to save all my users data in a database- I will work with the User object and the ORM layer will handle all the persistency stuff for me. Fun.</p>

<h2>Current solutions</h2>

<p>This concept is not new, developers used that technique for a long time, and it was natural that Android developers will need this kind of thing too.</p>

<p>Soon enough we got a couple of 3rd libraries to handle it, just look on <a href="https://android-arsenal.com/tag/69">AndroidArsenal page</a> and understand we&rsquo;re getting into crowded space here. The most popular ones are probably <a href="http://ormlite.com/">ORMLite</a>, <a href="http://greenrobot.org/greendao/">GreenDAO</a> and <a href="https://github.com/Raizlabs/DBFlow">DbFlow</a>.</p>

<h2>Creating a Model</h2>

<p>There are two main ways to define the mapping between your objects and the tables in Java: some DSL + code generator (like what GreenDAO is using), or using annotation (like ORMLite, DBFlow and most of the libraries). Although I&rsquo;m not a big fan of annotations, I must say the later is an easier solution.</p>

<p>These why it&rsquo;s no surprise that the Android team chose to go with this approach, so simple data model looks like this:
```java
@Entity
public class User {
    @PrimaryKey
    private int uid;</p>

<pre><code>@ColumnInfo(name = "first_name")
private String firstName;

@ColumnInfo(name = "last_name")
private String lastName;

// Getters and setters are ignored for brevity,
// but they're required for Room to work.
// (So please go and switch to Kotlin)
</code></pre>

<p>}
```
As in any other library- you can set a custom name for the table or the columns, you can choose to index some stuff and specify relationships between models.</p>

<h2>The API</h2>

<p>To interact with the data models, we use DAO- data access object. So nothing new from Google here also. For each model, we need to declare a DAO with CRUD operations. Every library covers the main functionality and offers kind of the same sets of features.</p>

<p>BUT while most of the ORM libraries using some in-code query builder, Room doing something nice and let you declare your queries in slick SQL formatting.</p>

<p>For example, here is how you&rsquo;ll do a simple query for specific users in each one of the platforms:
```java
    //Room:
    @Query(&ldquo;SELECT * FROM user WHERE age > :minAge&rdquo;)
    public User[] loadAllUsersOlderThan(int minAge);</p>

<pre><code>//DbFlow:
List&lt;User&gt; users = SQLite.select()
                         .from(User.class)
                         .where(User_Table.age.greaterThan(minAge)
                         .queryList();

//ORMLite:
List&lt;User&gt; users = userDao.queryBuilder()
                          .where()
                          .gt("age", minAge)
                          .query();
//GreenDAO:
List&lt;User&gt; users = userDao.queryBuilder()
                          .where(Properties.Age.gt(minAge))
                          .list();
</code></pre>

<p>```
On the one hand- it&rsquo;s cleaner and most of us familiar with SQL syntax, but on the contrary, you&rsquo;re losing some of the power of your object mapping (no autocomplete, and you need to remember the object&rsquo;s table).</p>

<h2>Performance</h2>

<p>Reading and writing to the database is an expensive IO operation. If you&rsquo;re working with lots of entities in your app, it might be a bottleneck.
That&rsquo;s why GreenDAO and DbFlow are heavily investing in performance (<a href="https://github.com/Raizlabs/AndroidDatabaseLibraryComparison/issues/16">it might even get ugly some times</a>).</p>

<p>I decided to check how Room performs in relation to the others, so I take the GreenDAO benchmark (I looked on <a href="https://github.com/Raizlabs/AndroidDatabaseLibraryComparison">Raizlabs benchmark</a> too, but I felt it&rsquo;s too biased), and added Room. You can see the source code <a href="https://github.com/greenrobot/android-database-performance/pull/19">here</a>.</p>

<p>I compared the results to the libraries discussed in the post. I ran all tests on an emulator and took the average of each library results (I&rsquo;ll attach the full results of each library, so you&rsquo;ll able to take a closer look).</p>

<p><img class="center" src="http://blog.shem.dev/images/posts/room/chart_1.png">
<img class="center" src="http://blog.shem.dev/images/posts/room/chart_2.png">
<img class="center" src="http://blog.shem.dev/images/posts/room/chart_3.png">
<img class="center" src="http://blog.shem.dev/images/posts/room/chart_4.png"></p>

<p>It is a simple, fast setup benchmark, and I didn&rsquo;t analyze the results too much. From first looking at the results- you can see that Room has no advantage in any aspect of performance over the other libs. While making small operations one by one- ORMLite has it&rsquo;s own advantages, when moving the bigger scales- DBFlow and GreenDAO obviously win (because the caching they use).</p>

<h2>Summary</h2>

<p>Google did a fantastic job by taking a step forward to help developers architect their apps better. The last components that Google introduced are right in place and should help each one of us write better code in less time.</p>

<p>BUT, choosing to deliver <em>another</em> ORM solution, with no added value (unless I&rsquo;m missing something here), is something that I do not understand. I would expect that the team will take an existing solution that works, or even just recommend one (<a href="https://developer.android.com/topic/libraries/architecture/guide.html#fetching_data">like what they are doing with Retrofit</a>).</p>

<hr />

<p><em>If you liked this post click the ♡ bellow and share this story. As a writer it means the world.</em></p>

<hr />

<p><em>Full reports:</em><br>
<em><a href="http://blog.shem.dev/files/posts/room/PerfTestDbFlow-1by1.tsv">PerfTestDbFlow-1by1.tsv</a></em><br>
<em><a href="http://blog.shem.dev/files/posts/room/PerfTestDbFlow-batch.tsv">PerfTestDbFlow-batch.tsv</a></em><br>
<em><a href="http://blog.shem.dev/files/posts/room/PerfTestNotNull-1by1.tsv">PerfTestNotNull-1by1.tsv (GreenDAO)</a></em><br>
<em><a href="http://blog.shem.dev/files/posts/room/PerfTestNotNull-batch.tsv">PerfTestNotNull-batch.tsv (GreenDAO)</a></em><br>
<em><a href="http://blog.shem.dev/files/posts/room/PerfTestOrmLite-1by1.tsv">PerfTestOrmLite-1by1.tsv</a></em><br>
<em><a href="http://blog.shem.dev/files/posts/room/PerfTestOrmLite-batch.tsv">PerfTestOrmLite-batch.tsv</a></em><br>
<em><a href="http://blog.shem.dev/files/posts/room/PerfTestRoom-1by1.tsv">PerfTestRoom-1by1.tsv</a></em><br>
<em><a href="http://blog.shem.dev/files/posts/room/PerfTestRoom-batch.tsv">PerfTestRoom-batch.tsv</a></em><br></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tech life as graphs II]]></title>
    <link href="http://blog.shem.dev/blog/2017/05/19/tech-life-as-graphs-2/"/>
    <updated>2017-05-19T10:02:04+00:00</updated>
    <id>http://blog.shem.dev/blog/2017/05/19/tech-life-as-graphs-2</id>
    <content type="html"><![CDATA[<p><a href="http://shem8.github.com/blog/2016/06/03/life-as-graphs/">Another part</a> of me trying to visualize situations of my tech life as graphs</p>

<!-- more -->


<h2>Native apps</h2>

<p><br>
<img src="http://blog.shem.dev/images/posts/graphs2/native_apps-eq.png">
<img src="http://blog.shem.dev/images/posts/graphs2/native_apps-eq2.png"></p>

<p><img class="center" src="http://blog.shem.dev/images/posts/graphs2/native_apps.png"></p>

<h2>Pair programing</h2>

<p><br>
<img src="http://blog.shem.dev/images/posts/graphs2/pairing.png"></p>

<h2>Ruby on Rails magic</h2>

<p><br>
<img src="http://blog.shem.dev/images/posts/graphs2/rails_magic-eq.png"></p>

<p><img class="center" src="http://blog.shem.dev/images/posts/graphs2/rails_magic.png"></p>

<h2>Public speaking</h2>

<p><br>
<img src="http://blog.shem.dev/images/posts/graphs2/public_speaking-eq.png"></p>

<p><img class="center" src="http://blog.shem.dev/images/posts/graphs2/public_speaking.png"></p>

<h2>JS hype</h2>

<p><br>
<img src="http://blog.shem.dev/images/posts/graphs2/js-eq.png"></p>

<p><img class="center" src="http://blog.shem.dev/images/posts/graphs2/js.png"></p>

<h2>Working hours</h2>

<p><br>
<img class="center" src="http://blog.shem.dev/images/posts/graphs2/working.png"></p>

<h2>Pull requests</h2>

<p><br>
<img src="http://blog.shem.dev/images/posts/graphs2/commits-eq.png"></p>

<p><img class="center" src="http://blog.shem.dev/images/posts/graphs2/commits.png"></p>

<h2>When watching <a href="http://wesbos.com/">Wes Bos</a> JS tutorials</h2>

<p><br>
<img src="http://blog.shem.dev/images/posts/graphs2/web.png"></p>

<h2>Emails</h2>

<p><br>
<img src="http://blog.shem.dev/images/posts/graphs2/email-eq.png"></p>

<p><img class="center" src="http://blog.shem.dev/images/posts/graphs2/email.png"></p>

<hr />

<p><br></p>

<p><em>If you liked this post click the ♡ bellow and share this story. As a writer it means the world.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 things I learned as an Android developer after doing some Web development]]></title>
    <link href="http://blog.shem.dev/blog/2017/03/31/5-things-i-learned-as-an-android-developer-after-doing-some-web-development/"/>
    <updated>2017-03-31T10:32:32+00:00</updated>
    <id>http://blog.shem.dev/blog/2017/03/31/5-things-i-learned-as-an-android-developer-after-doing-some-web-development</id>
    <content type="html"><![CDATA[<p>In the last couple of months, I started my new journey, leaving my Android position behind and started doing some web development. Working on those 2 platforms has many differences, I can’t say the one is better than the other, but there are many things that those 2 worlds can learn from each other.</p>

<!-- more -->


<p>In this post, I’ll focus on the things that I saw while working on our front-end React app. Things that I learned about Android and the way that we’re building apps.</p>

<h2>1. We write too much code</h2>

<p>Creating a custom view, even the simplest one, will probably going to take 1 too long View subclass. This class should contain a couple of constructors, getters/ setters, reading and parsing attributes and inflate an XML, and that’s without even mentioning the layout file. While on react you should only implement the render method (and maybe also CSS/SCSS file for customizations).</p>

<p>For example, here is a simple user info widget, written in Android and React:</p>

<div><script src='https://gist.github.com/e6e3f36ce7df9a4c3a2306377708c883.js'></script>
<noscript><pre><code>public class UserCardView extends FrameLayout {

    private TextView userNameView;
    private TextView userInfoView;
    private ImageView userImageView;

    public UserCardView(Context context) {
        this(context, null);
    }

    public UserCardView(Context context, AttributeSet attrs) {
        this(context, attrs, 0);
    }

    public UserCardView(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        init(context, attrs);
    }

    @TargetApi(Build.VERSION_CODES.LOLLIPOP)
    public UserCardView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
        super(context, attrs, defStyleAttr, defStyleRes);
        init(context, attrs);
    }

    private void init(Context context, AttributeSet attrs) {
        LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        inflater.inflate(R.layout.user_card_layout, this, true);

        TypedArray a = context.getTheme().obtainStyledAttributes(
                attrs,
                R.styleable.DefaultUserCardView,
                0, 0);

        userNameView = (TextView) findViewById(R.id.user_name;
        userInfoView = (TextView) findViewById(R.id.user_info;
        userImageView = (ImageView) findViewById(R.id.user_avatar);

        try {
            boolean withAvatar = a.getBoolean(R.styleable.DefaultUserCardView_withAvatar, true);
            userImageView.setVisibility(withAvatar ? View.VISIBLE : View.GONE);
        } finally {
            a.recycle();
        }
    }

    public void setUser(User user) {
        userNameView.setText(user.getName());
        userInfoView.setText(user.getInfo());
        userImageView.setImageResource(user.getAvatar());
    }
}</code></pre></noscript></div>




<div><script src='https://gist.github.com/35aa8f80662f6f0f03d044cd6d9dedc4.js'></script>
<noscript><pre><code>const UserCard = ({ user, withAvatar }) =&gt; {
  return (
    &lt;div&gt;
      { withAvatar &amp;&amp; &lt;img src={user.avatarUrl}/&gt; }
      &lt;span&gt;
        {user.name}
      &lt;/span&gt;
      &lt;span&gt;
        {user.info}
      &lt;/span&gt;
    &lt;/div&gt;
  );
};

UserCard.propTypes = {
  user: ProductShape.isRequired,
  withAvatar: PropTypes.bool
};</code></pre></noscript></div>


<p>I don’t event talk about things like JSON parsing, network calls or saving state.</p>

<p>This is mainly because of the use of language like Java on Android vs JavaScript. You can eliminate some of the boilerplate if you’re using Kotlin, or use <a href="https://developer.android.com/topic/libraries/data-binding/index.html">Data Binding</a> to get more done in the layout file but still.</p>

<h2>2. The development feedback cycle is too long</h2>

<p>How long it takes to see code changes on the device (virtual or physical) in Android studio? If you change small things like text or color, Google says it should take only a couple of seconds (when Instant run is enabled), most of the time it will take a couple dozen of seconds, and it even can get to a minute or two. Also- changes will be effected only when you click “Run”.</p>

<p>How long it take with React when using Webpack (a module bundler, or a “complier” if you want)? Immediately. Like second or two. And that’s happening right when you save the file. Changed the wrong element? Boom! you see it right away.</p>

<p>Don’t think that 5 or 10 seconds are really that different? When developing- every second count (and soon enough all those seconds will accumulate). Especially when those changes are shown passively (when the file is saved) and to actively (when you run the app). I really recommend you to see this <a href="https://vimeo.com/36579366">talk</a> and see how it can affect your development (warning: the speaker will blow your mind).</p>

<h2>3. Using Flux architecture</h2>

<p><a href="http://facebook.github.io/flux/">Flux</a> is the application architecture that Facebook uses for building client-side web applications. It complements React’s composable view components by utilizing a unidirectional data flow. It’s more of a pattern rather than a formal framework, and when combining React Router with Redux we can get some pretty close data flow to Flux pattern.</p>

<p>Flux making writing client side much cleaner and easier to debug and predict. Although there are some <a href="https://github.com/lgvalle/android-flux-todo-app">examples</a> and <a href="https://github.com/frostymarvelous/Fluxxan">libraries</a> for Android it’s still not widely used.
On Android apps we’re still passing data around in all kind of ways (intents, DB, message bus, etc…), keeping it mutable that every component can change it and by this- making our life really hard.</p>

<h2>4. Separate the content from how it looks</h2>

<p>When building a page on Android I must also build its layout. I need to arrange the the page and it’s component and somehow put them together in the view. Even if I just want to focus on behavior- I must somehow play with Linear Layouts, Scroll Layouts and things like that.</p>

<p>Then when I need to design the view I again need to return to the layout file and add all the magic. However, when I need to add animations- I’ll need to put it in the code.
The View class and the View layout are not that separate, it’s hard to focus only on the behavior without handling the look and feel. In Android, it’s too coupled.</p>

<p>But with React- you can extract all the UI-related code to the stylesheet file. for example, if I wanted to create a simple widget that changes the view state by clicking- I would do something like that (<a href="https://jsfiddle.net/reactjs/69z2wepo/">JSFddle</a>):</p>

<div><script src='https://gist.github.com/d120440fe48defa1b7cbfe1edc59b943.js'></script>
<noscript><pre><code>var Toggle = React.createClass({
  getInitialState: function() {
    return {
      condition: false
    }
  },
  handleClick: function() {
    this.setState({
      condition: !this.state.condition
    });
  },
  render: function() {
    return (
      &lt;div&gt;
        &lt;div onClick={this.handleClick}&gt; Click Me &lt;/div&gt;
        &lt;div className={this.state.condition ? &quot;enabled&quot; : &quot;disabled&quot;}&gt; Hello World &lt;/div&gt;
      &lt;/div&gt;
    );
  }
});</code></pre></noscript></div>


<p>And in the SCSS file, I would decide what does a disabled item looks like (hidden? gray out? I don’t care right now).
But if I wanted to do it in Android I would need to change it in the View class (or it’s parent, or in the OnClick listener).</p>

<h2>5. We can get better developer tools</h2>

<p>Do you remember the last time you select “Debug” in Android studio (I bet it was probably by mistake)? Do you remember those 1–2 minutes you waited until the app opened and the debugger was connected? Or that you attach the debugger to a running app and suddenly everything was slow as hell?</p>

<p>Do you remember that time there was a weird spacing between your views and you had to turn on some flags in the developer options settings and hope you’ll understand each view bounds from some random rectangles on the screen?
Do you remember trying to figure out what is going on with your database so you had to dump the database and pull it from the device?</p>

<p>Do you remember that you wanted to try out some things in your view on the device but needed to change the code and re-run it every time?</p>

<p>Chrome (and Firefox) developer tools make debugging and playing with your app so much easier that it is not fair. You can change views on the fly, inspect your elements easily and run some code in the console whenever you want.</p>

<hr />

<p>Web development is really nice (and much harder that I thought it will be actually), but I still have a much warmer place in my heart for Android. Although it’s no fair to compare the two (Android need to work on remote devices or on emulators, it’s much “younger” than the web) I think that the two communities can learn one from each other.</p>

<p>As for what web development can take from Android development- in the next post (hopefully).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I survived my first big conference talk]]></title>
    <link href="http://blog.shem.dev/blog/2016/09/23/my-way-to-reversim/"/>
    <updated>2016-09-23T14:32:27+00:00</updated>
    <id>http://blog.shem.dev/blog/2016/09/23/my-way-to-reversim</id>
    <content type="html"><![CDATA[<p><em>On 20.9 I presented at <a href="http://summit2016.reversim.com/">Reversim Summit</a> (one of the biggest conference for developers in Israel) about building Android apps. This was my first time talking in a conference at this scale. It wasn’t easy but I survived and I’m here to talk about my journey.</em></p>

<!-- more -->


<p>One day, something like 3 months ago, I stumble upon a post in one of my Facebook groups about a conference for developers going to take place in September:</p>

<blockquote><p>Hi all,</p><p>The Reversim Summit is probably one of the best (if not the best) independent software engineering (at large) conference in Israel, and it will be held this year at Sep. 19–20 at the Weizmann institute.</p><p>As an event 100% based on community generated content, the conference is as good as the quality of the submissions.</p><p>The call for papers is *now* open...</p></blockquote>


<p>This was the first time I heard about the Reversim Summit. I was familiar with the <a href="http://www.reversim.com/">podcast</a> and knew it was good, so I knew the conference should worth something. So I decided to give it a try.</p>

<h2>Picking the right content</h2>

<p>Ok, so I decided that I want to talk in the conference, but about what? One of the great tips that I’ve got (from the great <a href="https://twitter.com/chiuki">Chiu-Ki Chan</a> about <a href="https://www.youtube.com/watch?v=PeKKzeAte30">how to be an Android expert</a>) is to take one of your blog posts and create a talk. That’s, I thought, is a great way to give the reviewers a more compelling way instead of just 1–2 paragraphs when trying to describe what I’m going to talk about.</p>

<p>Luckily I wrote couple of technical posts, but most of them were some kind of tutorials on how to do all kind of things in Android. Also- most of them not gained too much tractions, what made me think that people won’t be too interested.</p>

<p>Moreover, knowing that this conference going to get lots of submissions, I knew that my talk should be different. Given that I don’t have enough reputation, and because people are interested more on technical problems in larger scale than mobile- If I will go head to head with other technical talks I’ll loose.</p>

<p>So, I decided to choose my series blog posts about How to build a bad app (<a href="http://blog.shem.dev/blog/2016/03/31/10-good-rules-for-bad-app-part-1-technical/">part 1</a>, <a href="http://blog.shem.dev/blog/2016/04/17/10-good-rules-for-bad-app-part-2-uxui/">part 2</a>, <a href="http://blog.shem.dev/blog/2016/05/06/10-good-rules-for-bad-app-part-3-product/">part 3</a>). This is great because:</p>

<ol>
<li>This will cover also other aspects of mobile developing, like design and product.</li>
<li>The talk will be about my experience and things that I’ve done. I think those are the best talks.</li>
<li>I don&rsquo;t like talks which are too technical- I don’t believe that we can read too much code from slides or understand deep technical concept without actually playing with it. So this will be great for high level review with lots of small things that everyone can get.</li>
<li>It’s light, it’s funny, it’s a lecture that is fun to deliver.</li>
</ol>


<h2>Call for Papers</h2>

<p>This is always a tricky part (although there’s couple of good resources about <a href="http://speaking.io/plan/writing-a-cfp/">how to write a good abstract for CFP</a> that can help).</p>

<p>How do I make my abstract highlight my talk and make it unique? How do I describe what I’m talking about (how to build a bad app) without confusing the audience? How to say that it’s a bit technical but not too much? How to let others know that it’s for developers, designers and products managers just in a single paragraph?</p>

<p>Tried my best and got this:</p>

<blockquote><p>Building a decent app is easy this days, there are plenty of tutorials, videos and blog post about it. In this session I’ll try to go over some of the top mistakes that everyone of us is doing while building his app. This will cover all the aspects of building bad app- technical, UI & UX, and product. So each one of you will be able to adapt his own favorite bad pattern and ruin his app.</p></blockquote>


<p>I think it’s great because it’s clear, but still leave the reader curious. People might afraid that it’s not technical enough but they know they can get out with action items from the talk.</p>

<p>The review started a week after, it was combined from crowd voting and team of moderators that process all requests and choose the best ones.</p>

<p>There were around 300 propose sessions and only 30 will be approved, I was in the mobile track, were there 30 submissions and only 3 will be chosen. 10% chance, not so high as you can understand.</p>

<p>After couple of mails and phone calls with my moderator (thanks <a href="https://twitter.com/amsalemadir">Adir Amsalem</a>!), I got this email:</p>

<p><img src="http://blog.shem.dev/images/posts/reversim/screenshot.png"></p>

<p style="text-align:center;"> <strong><em>Shit just got real.</em></strong></p>

<h2>Warming up</h2>

<p>Now it’s time to do the actual work. I immediately schedule a talk in my work place as part of our bi-weekly company talking program.</p>

<p>I decided to chose 5 rules for each list: technical, UI/UX and product. I wanted find for most of the 15 rules an  example from a real world app, aiming for big apps that everyone knows. Building a minimal slides, with the rules and a picture or two for visualisation (screenshots when possible, gifs for others) and couple of more slides for intro and background.</p>

<p><img src="http://blog.shem.dev/images/posts/reversim/slide.png"></p>

<p>It was great for first run, but there were some problems:</p>

<ol>
<li>It was too long, it took me around 50 minutes and I only have 35 (plus 5 minutes for questions). <strong>Solution- cut the rules list to 11.</strong></li>
<li>The audience was able to see the rule in the slide’s title when I moved to the slide and before I started to talk about. That killed the surprise affect. <strong>Solution- Change the order of the fade in animation, so the text will shown in the end.</strong></li>
<li>Gifs were keep playing and steel the audience (and my) attention. <strong>Solution- put a static image of the gif on top of the gif to “stop” the gif, and show in on click (great tip that I’m going to apply on all my presentation from now on).</strong></li>
</ol>


<p>After some tweaks, one of the mentors from the summit schedules another dry run on Wix offices. Kind of an intimate rehearsal (presenting it to him and another college) to gather final feedbacks.</p>

<p>Again, we found things that can be improved:
1. The intro is too long and not very clear. Solution- instead of talking about why I’m giving this lecture on 4 different slides, I’m going to tell my story on the first slide, tell about motivation on another slide, and remove the other 2.
2. Videos on Google slides not working without internet connection. Solution- keeping a local copy of the video, and use it.
3. The talk is finished kind of out of nowhere. Solution- add a summary slide with the list of all rules that we talked about.</p>

<p>I also changed the theme to more cleaner one and came out with this final slides:</p>

<h2>Show time</h2>

<p>September 19- the first day of the summit, register and gathering into the keynote (by the amazing Iris Shoor), entering a huge auditorium with around 500 people. Luckily (and actually with some disappointment) my session was scheduled to a much smaller room, so I didn’t need to freak out from having to talk in front of so many people.</p>

<p>During the summit I got into some great talks (by Eyal Yavor, Lior Bar-On, Yuval Samet, Boaz Gaon and Oren Ellenbogen) and a amazing lighting talks (especially the ones by Hagai Levin and Michal Tirosh) and even a song! (by Yoni Tsafir). This is another nice benefit when you talk in a conference- you get a free ticket =)</p>

<p>My talk was on the morning of the second day, I was a bit nervous but not too much. The Reversim team was great and everything was taken care for me. I just needed to memorize the order of the rules (because as you remember, I changed it and I don’t have the text in slide when I start talking about it) but beside of this I felt really confident.</p>

<p><img src="http://blog.shem.dev/images/posts/reversim/IDOR3385.png"></p>

<p>Everything went very well, the hall wasn’t big so I didn’t need a microphone, what made it more natural. I also get some friends in the audience, what made me less stressed. I even nailed some jokes that I thought about right before I started.</p>

<p>It’s all finished very quickly. It’s funny how you prepare yourself for very long time just to build a 40 minute talk. On the stage it even feel shorter.</p>

<p>I got very good feedbacks, they said that the talk was very good and they learn one thing or two about mistakes that they didn’t thought about before.</p>

<h2>What’s next</h2>

<p>Since then I gave the talk on another conference- <a href="http://il.droidcon.com/2015/">Droidcon Tel-Aviv</a> and I plan to do it one or maybe two more times.</p>

<p>I feel very comfortable talking in Hebrew, even in front of a big audience. My next milestone is to bring this kind confident to when I’m talking in English, and to give a talk in a conference abroad. I might need to prepare more than what I’m used to, but I think that I will able to do it very soon.</p>

<h2>Conclusions</h2>

<ol>
<li>Pick your talk wisely. Think what is your relative advantage and how your talk can stand out from all the others.</li>
<li>Don’t be shy. Don’t think that you’re not interesting enough and you have nothing that others can learn from.</li>
<li>With any rehearsal you will get you more feedback, doing it more- the better your talk and slides will be. BUT:</li>
<li>Don’t overthink it. You’ll never get perfect. Learn where it’s good enough and stop you feel confident with what you got.</li>
</ol>


<h1><br/></h1>

<p><em>Photos by: <a href="https://photos.google.com/share/AF1QipPORYX7nOWI1AsG8wE8SDrKCi3llj81FxRS1aXKfVrt1oauBI_KIZKWaAb79JoJ1w?key=OFJXdVJyZHUzckRjbUY3UXgyWmNSWHQ3R1lIR2F3">Reversim Summit 2016 photo album</a></em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tech Life as graphs]]></title>
    <link href="http://blog.shem.dev/blog/2016/06/03/life-as-graphs/"/>
    <updated>2016-06-03T09:08:42+00:00</updated>
    <id>http://blog.shem.dev/blog/2016/06/03/life-as-graphs</id>
    <content type="html"><![CDATA[<p>As a geek I often imagine situations in life as a math equations and graphs (don&rsquo;t you all do it too? What&rsquo;s wrong with you people?!). In this post I&rsquo;ll try to describe some situations is the tech life as graphs:</p>

<!-- more -->


<h2>How excited are you when working in corporate:</h2>

<p><br>
<img src="http://blog.shem.dev/images/posts/graphs/corporate_eq.png"></p>

<p><img class="center" src="http://blog.shem.dev/images/posts/graphs/corporate.png"></p>

<h2>How excited are you when working in startup:</h2>

<p><br>
<img src="http://blog.shem.dev/images/posts/graphs/startup_eq.png"></p>

<p><img class="center" src="http://blog.shem.dev/images/posts/graphs/startup.png"></p>

<h2>#Lines of code you write:</h2>

<p><br>
<img src="http://blog.shem.dev/images/posts/graphs/code_eq.png"></p>

<p><img class="center" src="http://blog.shem.dev/images/posts/graphs/code.png"></p>

<h2>Startup burn rate:</h2>

<p><br>
<img src="http://blog.shem.dev/images/posts/graphs/burnrate_eq.png"></p>

<p><img class="center" src="http://blog.shem.dev/images/posts/graphs/burnrate.png"></p>

<h2>Do your css rules are working:</h2>

<p><br>
<img src="http://blog.shem.dev/images/posts/graphs/css_eq.png"></p>

<p><img class="center" src="http://blog.shem.dev/images/posts/graphs/css.png"></p>

<h2>Number of messages you get from girls- LinkedIn / Tinder</h2>

<p><br>
<img src="http://blog.shem.dev/images/posts/graphs/burnrate_eq.png"></p>

<p><img class="center" src="http://blog.shem.dev/images/posts/graphs/linkedin.png"></p>

<h2>How much you think you know android:</h2>

<p><br>
<img src="http://blog.shem.dev/images/posts/graphs/android_eq.png"></p>

<p><img class="center" src="http://blog.shem.dev/images/posts/graphs/android.png"></p>

<h2>How much you like your PM:</h2>

<p><a href="https://en.wikipedia.org/wiki/Nowhere_continuous_function#Dirichlet_function">Dirichlet function</a></p>

<p><img class="center" src="http://blog.shem.dev/images/posts/graphs/PM.png"></p>

<hr />

<p><br>
<em>Update: looks like people loving some of those graphs, so following couple of requests- you can now get it on shirts or stickers <a href="https://teespring.com/stores/geeksshirts">here</a>.</em>
<br><br></p>

<hr />

<p><br></p>

<p><em>If you enjoyed this post, please hit the “recommend” button below and share this story. I also love reading all comments. Thanks!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing with Coordinator Layout]]></title>
    <link href="http://blog.shem.dev/blog/2016/05/27/playing-with-coordinator-layout/"/>
    <updated>2016-05-27T12:02:52+00:00</updated>
    <id>http://blog.shem.dev/blog/2016/05/27/playing-with-coordinator-layout</id>
    <content type="html"><![CDATA[<p>Lately I needed to build some kind of overlay screen that looks like the one that shows when you open the phone when you don&rsquo;t have a lock screen. This is a simple overlay screen that should be dismissable when the user swipe it out from the lower part of the screen<!-- more -->, something like this:</p>

<p><img class="center" src="http://blog.shem.dev/images/posts/get-feature-packed-iphone-like-lock-screen-for-your-galaxy-s6-other-android-device-w654.jpg" width="211" title="*" ></p>

<p>When coming to implement it, I thought about building a <em>LinearLayout</em> with 2 views- the content view and the swipe view, than put some touch listener on the swipe view and implement swiping mechanism, than syncing both view to act the same. But when I thought about it more and more I decided that it&rsquo;s too much work. Searching this kind of code or library out there always bring me to <em>RecycleView</em> swipe to dismiss items, and in one of those search results I saw how to implement this swipe to dismiss item in <em>RecycleView</em> with <em>CoordinatorLayout</em>, so I decided to give it a chance.</p>

<p><em><a href="http://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.html">CoordinatorLayout</a></em> is a really great addition in the design support library. Most of you probably already used it with a <a href="https://guides.codepath.com/android/floating-action-buttons">floating action buttons</a> or <a href="http://www.androidhive.info/2015/09/android-material-design-snackbar-example/">snackbars</a> but if you like me- you just put it there, assuming views will move properly, without really diving into how the layout is syncing between them.</p>

<p>So it turns out that <em>CordinatorLayout</em> is pretty powerful, it let you easily define interactions on child views and even between them, those interactions are called <a href="http://developer.android.com/reference/android/support/design/widget/CoordinatorLayout.Behavior.html">behaviors</a> so that each child can behave differently according to things that are happening in the layout. You can do a really cool things with those behaviors, here is one example for a <a href="http://saulmm.github.io/mastering-coordinator">great blog post</a> that I stumble upon my searches about coordinate layout usages.</p>

<p>In our case it suppose to be pretty easy, there is already a <a href="http://developer.android.com/reference/android/support/design/widget/SwipeDismissBehavior.html">swipe to dismiss behavior</a> ready to be used on the lower view, so we just need to attach it to the relevant view. First lets build our layout:</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span></span><span class="nt">&lt;android.support.design.widget.CoordinatorLayout</span>
</span><span class='line'><span class="w">    </span><span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'><span class="w">    </span><span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'><span class="w">    </span><span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="w">    </span><span class="nt">&lt;FrameLayout</span><span class="w"> </span><span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'><span class="w">         </span><span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'><span class="w">         </span><span class="na">android:id=</span><span class="s">&quot;@+id/container&quot;</span>
</span><span class='line'><span class="w">         </span><span class="na">android:background=</span><span class="s">&quot;#06ff87&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="w">    </span><span class="nt">&lt;TextView</span>
</span><span class='line'><span class="w">        </span><span class="na">android:id=</span><span class="s">&quot;@+id/dismiss&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:text=</span><span class="s">&quot;&gt; Swipe to dismiss &gt; &gt; &gt;&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:padding=</span><span class="s">&quot;30dp&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:gravity=</span><span class="s">&quot;center&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:layout_gravity=</span><span class="s">&quot;center_horizontal|bottom&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:background=</span><span class="s">&quot;#3bb0ff&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/android.support.design.widget.CoordinatorLayout&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


<p>As said, it’s a simple layout with 2 view- one for the content (the green one) and one for the swiping (the blue one).</p>

<p>Now, lets attach the relevant behavior to the relevant view:</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span></span><span class="n">View</span><span class="w"> </span><span class="n">dismiss</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">findViewById</span><span class="p">(</span><span class="n">R</span><span class="p">.</span><span class="na">id</span><span class="p">.</span><span class="na">dismiss</span><span class="p">);</span>
</span><span class='line'><span class="n">CoordinatorLayout</span><span class="p">.</span><span class="na">LayoutParams</span><span class="w"> </span><span class="n">params</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">CoordinatorLayout</span><span class="p">.</span><span class="na">LayoutParams</span><span class="p">)</span><span class="w"> </span><span class="n">dismiss</span><span class="p">.</span><span class="na">getLayoutParams</span><span class="p">();</span>
</span><span class='line'><span class="n">SwipeDismissBehavior</span><span class="o">&lt;</span><span class="n">View</span><span class="o">&gt;</span><span class="w"> </span><span class="n">behavior</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">SwipeDismissBehavior</span><span class="o">&lt;&gt;</span><span class="p">();</span>
</span><span class='line'><span class="n">behavior</span><span class="p">.</span><span class="na">setSwipeDirection</span><span class="p">(</span><span class="n">SwipeDismissBehavior</span><span class="p">.</span><span class="na">SWIPE_DIRECTION_START_TO_END</span><span class="p">);</span>
</span><span class='line'><span class="n">behavior</span><span class="p">.</span><span class="na">setListener</span><span class="p">(</span><span class="k">new</span><span class="w"> </span><span class="n">SwipeDismissBehavior</span><span class="p">.</span><span class="na">OnDismissListener</span><span class="p">()</span><span class="w"> </span><span class="p">{</span>
</span><span class='line'><span class="w">    </span><span class="nd">@Override</span>
</span><span class='line'><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">onDismiss</span><span class="p">(</span><span class="kd">final</span><span class="w"> </span><span class="n">View</span><span class="w"> </span><span class="n">view</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
</span><span class='line'><span class="w">        </span><span class="n">finish</span><span class="p">();</span>
</span><span class='line'><span class="w">    </span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="w">    </span><span class="nd">@Override</span>
</span><span class='line'><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">onDragStateChanged</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">)</span><span class="w"> </span><span class="p">{}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="n">params</span><span class="p">.</span><span class="na">setBehavior</span><span class="p">(</span><span class="n">behavior</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


<p>That&rsquo;s pretty self explained- we declare a new swipe to dismiss behavior, set it&rsquo;s direction only to right, and finish the activity on dismiss. But there&rsquo;s on problem- somehow, although we declare this behavior only on the dismiss view, it working on all the view, so also the content view is swipeable as you can see here:</p>

<p><img class="center" src="http://blog.shem.dev/images/posts/ezgif-4244700794.gif" width="280" height="498"></p>

<p>I&rsquo;m not sure if this is by design or just a bug (after digging in the code I&rsquo;m afraid this behavior is not intended) but we can easily fix this by creating our own behavior. Of course that we not going to write this whole code from beginning, we&rsquo;ll use the <em>SwipeDismissBehavior</em> class and just fix the relevant code. I really recommend doing a little investigation and reading the Android code, that&rsquo;s way you&rsquo;re fully understand how things really works and get to read an high quality code written by the Android developers, in that case the fix is pretty easy to spot- the <em>SwipeDismissBehavior</em> handle touch events also if those touches not in the view (although there is a check in the <em>onInterceptTouchEvent</em> method and those events should be ignore) so I created a new behavior class just for this fix:</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span></span><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Handle only touches on this current view</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">onTouchEvent</span><span class="p">(</span><span class="n">CoordinatorLayout</span><span class="w"> </span><span class="n">parent</span><span class="p">,</span><span class="w"> </span><span class="n">V</span><span class="w"> </span><span class="n">child</span><span class="p">,</span><span class="w"> </span><span class="n">MotionEvent</span><span class="w"> </span><span class="n">event</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
</span><span class='line'><span class="w">    </span><span class="k">if</span><span class="w"> </span><span class="p">(</span><span class="n">parent</span><span class="p">.</span><span class="na">isPointInChildBounds</span><span class="p">(</span><span class="n">child</span><span class="p">,</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="w"> </span><span class="n">event</span><span class="p">.</span><span class="na">getX</span><span class="p">(),</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="w"> </span><span class="n">event</span><span class="p">.</span><span class="na">getY</span><span class="p">()))</span><span class="w"> </span><span class="p">{</span>
</span><span class='line'><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="kd">super</span><span class="p">.</span><span class="na">onTouchEvent</span><span class="p">(</span><span class="n">parent</span><span class="p">,</span><span class="w"> </span><span class="n">child</span><span class="p">,</span><span class="w"> </span><span class="n">event</span><span class="p">);</span>
</span><span class='line'><span class="w">    </span><span class="p">}</span>
</span><span class='line'><span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


<p>Changing the activity to use <em>SwipeDismissOnlyOnViewBehavior</em> instead of <em>SwipeDismissBehavior</em> is doing the work:</p>

<p><img class="center" src="http://blog.shem.dev/images/posts/ezgif-2527994552.gif" width="280" height="498"></p>

<p>Now we need to sync between the content view to the dismiss view when swiping, so we creating a new behavior just for this. Because this is really simple behavior all we need to implement are 2 functions, in which view this content view depended (<em>layoutDependsOn</em>) and what to do when the dependent view changed (<em>onDependentViewChanged</em>):</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span></span><span class="o">=</span>
</span><span class='line'><span class="n">CoordinatorLayout</span><span class="p">.</span><span class="na">LayoutParams</span><span class="w"> </span><span class="n">params</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">CoordinatorLayout</span><span class="p">.</span><span class="na">LayoutParams</span><span class="p">)</span><span class="w"> </span><span class="n">container</span><span class="p">.</span><span class="na">getLayoutParams</span><span class="p">();</span>
</span><span class='line'><span class="kd">final</span><span class="w"> </span><span class="n">CoordinatorLayout</span><span class="p">.</span><span class="na">Behavior</span><span class="o">&lt;</span><span class="n">View</span><span class="o">&gt;</span><span class="w"> </span><span class="n">behavior</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">CoordinatorLayout</span><span class="p">.</span><span class="na">Behavior</span><span class="o">&lt;</span><span class="n">View</span><span class="o">&gt;</span><span class="p">()</span><span class="w"> </span><span class="p">{</span>
</span><span class='line'><span class="w">    </span><span class="nd">@Override</span>
</span><span class='line'><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">layoutDependsOn</span><span class="p">(</span><span class="n">CoordinatorLayout</span><span class="w"> </span><span class="n">parent</span><span class="p">,</span><span class="w"> </span><span class="n">View</span><span class="w"> </span><span class="n">child</span><span class="p">,</span><span class="w"> </span><span class="n">View</span><span class="w"> </span><span class="n">dependency</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
</span><span class='line'><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="n">dependency</span><span class="p">.</span><span class="na">getId</span><span class="p">()</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="n">R</span><span class="p">.</span><span class="na">id</span><span class="p">.</span><span class="na">dismiss</span><span class="p">;</span>
</span><span class='line'><span class="w">    </span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="w">    </span><span class="nd">@Override</span>
</span><span class='line'><span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kt">boolean</span><span class="w"> </span><span class="nf">onDependentViewChanged</span><span class="p">(</span><span class="n">CoordinatorLayout</span><span class="w"> </span><span class="n">parent</span><span class="p">,</span><span class="w"> </span><span class="n">View</span><span class="w"> </span><span class="n">child</span><span class="p">,</span><span class="w"> </span><span class="n">View</span><span class="w"> </span><span class="n">dependency</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
</span><span class='line'><span class="w">        </span><span class="n">child</span><span class="p">.</span><span class="na">setX</span><span class="p">(</span><span class="n">dependency</span><span class="p">.</span><span class="na">getX</span><span class="p">());</span>
</span><span class='line'><span class="w">        </span><span class="n">child</span><span class="p">.</span><span class="na">setAlpha</span><span class="p">(</span><span class="n">dependency</span><span class="p">.</span><span class="na">getAlpha</span><span class="p">());</span>
</span><span class='line'><span class="w">        </span><span class="k">return</span><span class="w"> </span><span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="w">    </span><span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="n">params</span><span class="p">.</span><span class="na">setBehavior</span><span class="p">(</span><span class="n">behavior</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


<p>And voila:</p>

<p><img class="center" src="http://blog.shem.dev/images/posts/ezgif-2484339332.gif" width="280" height="498"></p>

<p><a href="http://giphy.com/gifs/honda-honda-valueofx-civicx-xT77XRp55yPwHkd5Nm"><img class="center" src="https://media.giphy.com/media/xT77XRp55yPwHkd5Nm/giphy.gif" width="480" height="270"></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[10 good rules for bad App, Part 3- Product]]></title>
    <link href="http://blog.shem.dev/blog/2016/05/06/10-good-rules-for-bad-app-part-3-product/"/>
    <updated>2016-05-06T12:37:07+00:00</updated>
    <id>http://blog.shem.dev/blog/2016/05/06/10-good-rules-for-bad-app-part-3-product</id>
    <content type="html"><![CDATA[<p>Welcome to the third (and last) part of the tutorial of how building a bad app. After we&rsquo;ve building a bad app in the <a href="http://shem8.github.com/blog/2016/03/31/10-good-rules-for-bad-app-part-1-technical/">first part</a>, and remarkably ruin its look and feel in the <a href="http://shem8.github.com/blog/2016/04/17/10-good-rules-for-bad-app-part-2-uxui/">second part</a>, we&rsquo;re now going to go over on 10 steps to easily how to kill your product:</p>

<!--more-->


<h2>#1: Add as many features as possible</h2>

<p>The first and my favorite- fill your backlog with everything you can think of that every one of your users might use in any time of the future. Fill your app with tons of functionalities (and let the poor designer figure it out how to squeeze it all to a single screen), because as we all know- the more options your users will have, the more freedom they will have to do things with your app (<a href="https://www.ted.com/talks/barry_schwartz_on_the_paradox_of_choice?language=en">not</a>).</p>

<h2>#2: Listen to every single feedback and implement it</h2>

<p>Worrying that you implemented all your 492 items from your backlog and the ideas are about to run out? Go over all the store reviews, search some feedbacks in twitter and check all the posts in your beta group. Users are very demanding creatures and probably will keep whining about all those features that your app absolutely garbage without, yes even if it isn&rsquo;t the core of the app or they can do it easily with other apps.</p>

<p><img class="center" src="https://shem8.files.wordpress.com/2016/05/13oxx4.jpg" width="504" title="True story" alt="True story"></p>

<h2>#3: Trust you instincts, no A/B testing or data analysing</h2>

<p>Because you are the PM and you know what your users want, and this should CTA button should absolutely be green. Or red. Whatever.</p>

<p><strong>Bonus points: </strong>change your opinion regularly and randomly.</p>

<h2>#4: Add all possible login platforms</h2>

<p>Everyone using Facebook, so it kind of a must, also adding Twitter and Instagram- to make thinks more viral, and Google of course, and Flicker and Yahoo just in case, and you must also put the plain email and password for those who live in Mars or something.</p>

<h2>#5: Support the oldest android version</h2>

<p>Because why not? you&rsquo;re not the one the writing the code. And every user count! also those 0.8% of the users that still using 2.2, although those devices are so weak that your 42MB app probably can&rsquo;t even run on them.</p>

<h2>#6: Don&rsquo;t translate your app</h2>

<p>Because you targeting only for US and you&rsquo;re ok of not growing, and no one else will use it.</p>

<p><strong>Bonus points: </strong>if you do decide to translate your app- use a low pricing translate service so your translation will look really funny for non English users.</p>

<h2>#7: Treat all your users the same</h2>

<p>In addition to the previous one- all my users understand English and prefer paying with PayPal, and they love to take a lot of pictures and they have Gmail account and they understand that green is positive and red in negative. Basically all your users are you.</p>

<h2>#8: Keep asking your users to rate your app</h2>

<p>Reviews are crucial to your app listing and you <strong>MUST</strong> make your users leave a good ratings and review for your app in the store. Try to do anything to make them do so- prompting a &ldquo;rate us&rdquo; widget in the app every time they are doing something (also after failed actions), send them a weekly email with a rating request, hell- even put it after intro, before they even used the app, everything goes.</p>

<h2>#9: Use cheap campaigns to buy users</h2>

<p>Users drive more users, before app start to be viral it should start with some core users, so what if those are not a real users and they actually do nothing, the numbers are growing and eventually this will catch.</p>

<h2>#10: Put lots of ads</h2>

<p>Last but not least, your app should make some money (I think), you can think of adding a value that users will find it useful and will want to pay for it, but it&rsquo;s too complicate. Ads is the easiest way to make money in the apps world (and to piss of your users).</p>

<p><img class="center" src="https://shem8.files.wordpress.com/2016/05/19285pti64teljpg.jpg" width="800" title="* 'Source: gizmodo.com 'Source: gizmodo.com" ></p>

<hr />

<p>That&rsquo;s it, by now you should be ably to easily assemble a one hell of an App that will quickly burry in the big cemetery of the apps.</p>

<p>As always- got some more suggestions for ways to make your app worse? Would love to hear your thoughts in the comments!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[10 good rules for bad App, Part 2- UX\UI]]></title>
    <link href="http://blog.shem.dev/blog/2016/04/17/10-good-rules-for-bad-app-part-2-uxui/"/>
    <updated>2016-04-17T16:04:28+00:00</updated>
    <id>http://blog.shem.dev/blog/2016/04/17/10-good-rules-for-bad-app-part-2-uxui</id>
    <content type="html"><![CDATA[<p>Welcome to my second part of the tutorial of how building a bad app. After we&rsquo;ve building a bad app in the <a href="http://shem8.github.com/blog/2016/03/31/10-good-rules-for-bad-app-part-1-technical/">first part</a>, it&rsquo;s the time to call our designer to fuck it a bit more:</p>

<!--more-->


<h2>#1: Ignore material design guidelines</h2>

<p>Google, one of the greatest companies in the world, put lots of efforts creating material design, they probably do a long user research and gather feedback from many expert, but hey- you are the one with the bachelor of industrial design, so you probably know better.</p>

<h2>#2: Invent your own navigation pattern</h2>

<p>If Facebook can do it so can you, also- if your app will be so good Google might <a href="http://www.theverge.com/2016/3/15/11236152/material-design-update-bottom-navigation-bar">give up</a> and adapt it.</p>

<h2>#3: Create a mysterious app icon</h2>

<p>That&rsquo;s really helpful when users need to quickly find your app from 40 apps icons grid.</p>

<p><img class="center" src="https://shem8.files.wordpress.com/2016/04/yo-app-icon.png" width="131" title=", of course." alt="App that let you send "></p>

<h2>#4: Use your own ideas for icons</h2>

<p>Now I&rsquo;m talking about in app icons. I understand- you don&rsquo;t fully pleased with the Android default share icon, you&rsquo;re also didn&rsquo;t find anything suits to your needs between hundreds of <a href="https://design.google.com/icons/">material design icons</a> so why not creating a full icon pack from your own?</p>

<p><strong>Bonus points:</strong> don&rsquo;t even bother to add title to your menu items, so that users will able to get a textual hint.</p>

<h2>#5: Create intro, overlay explanations AND hints</h2>

<p>Because users are stupid (mostly true) and they always read your explanation (no chance ever)</p>

<p><strong>Bonus points:</strong> do a step-by-step tutorial with no option to skip.</p>

<h2>#6: Don&rsquo;t support integration with other apps within your app</h2>

<p><a href="http://developer.android.com/training/basics/intents/index.html">Android has a great mechanism</a> to interact actions between apps, but that&rsquo;s not too good for your app because that means users are going to leave your app. When users leave your app, that means less cash from ads. Less cash means you MIGHT have to find a real job.</p>

<h2>#7: Don&rsquo;t support integration with other apps into your app</h2>

<p>In addition to previous point- respect other apps and don&rsquo;t still they users please.</p>

<p><strong>Bonus points:</strong> If you ended up supporting your app to filter intents from other apps- ignore context and just open the main screen and not the relevant page.</p>

<h2>#8: Put animations everywhere</h2>

<p>A <a href="https://shem8.wordpress.com/2015/10/02/pimp-up-your-splash-screen/">splash screen animation</a> is nice, even <a href="https://www.google.com/design/spec/animation/meaningful-transitions.html">Google</a> recommend adding animation while moving between screens, and the more the merrier</p>

<p><img class="center" src="https://shem8.files.wordpress.com/2016/04/giphy.gif" width="448" title="Is it too much" alt="Is it too much"></p>

<h2>#9: Use gifs instead of drawing things in code or animation drawable</h2>

<p>Yes, I know, <a href="https://shem8.wordpress.com/2016/02/25/animated-vector-drawable/">animation drawable</a> might saves you a couple of MB, but your time is much more important!</p>

<h2>#10: Create resources for all resolutions</h2>

<p>Because you just saves time, so lets waste it.</p>

<p><br><br></p>

<hr />

<p><em>Next time we going to talk about how to make things a little bit worse by the product guys so stay tuned.</em></p>

<p><strong>Got some more suggestions for ways to make your look and feel worse? Would love to hear your thoughts in the comments!</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[10 good rules for bad App, Part 1- Technical]]></title>
    <link href="http://blog.shem.dev/blog/2016/03/31/10-good-rules-for-bad-app-part-1-technical/"/>
    <updated>2016-03-31T18:00:52+00:00</updated>
    <id>http://blog.shem.dev/blog/2016/03/31/10-good-rules-for-bad-app-part-1-technical</id>
    <content type="html"><![CDATA[<p>We were all been there, you got a great idea for an app, you gather some feedback and even managed to build a team and you going full power to conquer the app store. So a second before starting working on your genius <a href="https://play.google.com/store/apps/details?id=com.mobication.EggTimerPro&amp;hl=en">egg timer app</a>, it is worth taking a moment and think about how you&rsquo;re going to do it.</p>

<!--more-->


<p>Following the hilarious post by Chet Haase about <a href="https://medium.com/pointer-io/this-article-is-exclusive-to-pointer-a-reading-club-for-developers-9b03f3df060c">10 good rules for bad API</a>, I decided to put together my list about how to build a bad app. but a few notes first:</p>

<ul>
<li><p>There are so many bad apps out there, each one is bad in it own way so it&rsquo;s really hard to set only 10. I tried to do my best for taking the top bad patterns, but I trust you to keep fucking it up much more than what I&rsquo;m talking about here.</p></li>
<li><p>The beauty of the apps world that you can go wrong in many aspects of the product, that makes enough room for each team member to ruin your business, that is why I divided this blog post into 3 parts- technically, UI/UX and product.</p></li>
<li><p>Even good apps can adopt one or two bad things to their app, so it&rsquo;s not all or nothing.</p></li>
<li><p>Those bad habits are bad habits right now, because Google already proved that they can change that any time (like <a href="https://www.google.com/design/spec/components/bottom-navigation.html">bottom navigation</a> is a thing now? WTF?!)</p></li>
<li><p>Who am I to say about apps if they are doing a bad things or not? That&rsquo;s because I&rsquo;ve done most of the things here and then realised how bad it is, that&rsquo;s why.</p></li>
<li><p>The list not sorted by priority, because it&rsquo;s hard to compare what buried your app in the store listing.</p></li>
<li><p>I&rsquo;m not <a href="https://medium.com/@chethaase">Chet Haase</a> so this post can&rsquo;t be half good or funny as his, so sorry for that.</p></li>
</ul>


<p><br></p>

<p><em>Enough said, lets start with the list:</em></p>

<h2>#1: Ask as many permission as possible</h2>

<p>You know what your app worth, don&rsquo;t let minor things like user privacy get down your way. The user is begging for this crucial analytics sending on boot, so go and ask that BOOT_COMPLETED permission! If you need to share this wonderful url to your user&rsquo;s friends- pull the fucking contact list from his phone, and while you doing so why not sending it to your server and spam them all? Remember- data is power, and other&rsquo;s data is money!</p>

<p><strong>Bonus point:</strong> when implement Android M permissions, don&rsquo;t let the user do anything until he or she accept your permission, even if he accepted some, don&rsquo;t let him win!</p>

<h2>#2: Lock UI thread while loading</h2>

<p>Hey dude, we&rsquo;re loading, we&rsquo;ll really appreciate if you let us do our thing and don&rsquo;t interrupt us with some stupid ui events, just sit quietly and wait us to finish processing all this 3.4M config xml file ok?!</p>

<p><img class="center" src="https://shem8.files.wordpress.com/2016/03/loading_time.jpg" width="400" title="*" ></p>

<h2>#3: Retry endlessly</h2>

<p>Yes we&rsquo;re still waiting for this config file, it&rsquo;s your fault for living in this shitty connectivity area, don&rsquo;t blame us for sucking all you data plan and battery alright?!</p>

<h2>#4: Don&rsquo;t save activity or fragment state</h2>

<p>You snooze you lose, you rotated the screen? Boom- your form was lost. This is the best way to teach your users never leave your app, even if them just got a phone call.</p>

<h2>#5: Use setExact + RTC_WAKEUP for for your AlarmManager</h2>

<p>Alarm manager is get tool by Android to execute code in some time in the future. The thing is timing is everything and the Alarm Manager has some options for firing the code smartly and rescheduling it depending on phone state, battery, network or other tasks that can piggy bag. But you probably don&rsquo;t need those fancy features, there&rsquo;s nothing like putting your &ldquo;Please update our app&rdquo; notification waking you app 6AM.</p>

<p><strong>Bonus points:</strong> combine setExact + RTC_WAKEUP to the same time for all your users for your network request to your servers for taking your load balancer to the edge.</p>

<h2>#6: Use Application context everywhere</h2>

<p>Because why not? Save your application context as a static member in your Application class on <em>onStart</em> and use it everywhere- so easy, so simple, so not modular, make it horribly when you want to debug theming errors and make your tests a nightmare. Win Win!</p>

<h2>#7: Put errors strings technical as possible</h2>

<p>That&rsquo;s make it much easier when something goes wrong on the users side, so they&rsquo;ll just forward you the message. That&rsquo;s also make your app a developer-friendly so people like me can easily understand that they missing a certificate to the https connection and that&rsquo;s why the app keep crashing when sharing a photo.</p>

<h2>#8: Implement all by yourself</h2>

<p>Android has a very strict limit of 65k methods limit, after importing google play and support libraries that&rsquo;s barely leaves you with room for 3rd libraries. Anyway, how hard is it to handle Json parsing? you don&rsquo;t really need this Gson library. It&rsquo;s also a great opportunity for your junior dev to practice his poor implementation of string pattern matching from his <a href="https://twitter.com/holman/status/681922317958524928">job interview</a>.</p>

<h2>#9: Premature optimization</h2>

<p>Great, you just implemented the sorting by yourself, probably with bucket sort, because you know the data going to be evenly distributed, probably, you think so&hellip; You also saw <a href="https://www.parleys.com/tutorial/part-1-android-performance-workshop">the talk by Romain Guy and Chet Haase</a> (him again?) and switched all you enums with constants ints and use objects pull everywhere even if this just one time function because who know what can happen.</p>

<p>You know what they say- Premature optimization is the root of all evil, but a greater <a href="http://www.goodreads.com/quotes/30725-there-is-no-good-and-evil-there-is-only-power">women also said</a>: &ldquo;There is no good and evil, there is only power and those too weak to seek it.&rdquo; and I hope you see the power on N when implementing those graph algorithms.</p>

<p><img class="center" src="https://shem8.files.wordpress.com/2016/03/the_general_problem.png" width="550" title="*" ></p>

<h2>#10: Extract everything to static Util class</h2>

<p>Move it all- Android specific functionality, networking calls, permissions checks, input checking, not-object-oriented-never-going-to-be-able-to-test code it all goes here.</p>

<p><strong>Bonus points:</strong> have a Util and Utils classes, because one is not enough and confusing is a plus!</p>

<p><br><br></p>

<hr />

<p><em>That&rsquo;s all until the next time when we&rsquo;re going to talk a bit about UI and UX, Got some more suggestions for ways to make your code worse? Would love to hear your thoughts in the comments!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Animated Vector Drawable]]></title>
    <link href="http://blog.shem.dev/blog/2016/02/25/animated-vector-drawable/"/>
    <updated>2016-02-25T19:43:46+00:00</updated>
    <id>http://blog.shem.dev/blog/2016/02/25/animated-vector-drawable</id>
    <content type="html"><![CDATA[<p>In API 21 the Android team released bunch of very cool things for material design, most of the things focus around the design specs like colors or transition animation, other were for the new widgets like FAB, card view or recycle view, but within all those things there were also two things that barely discussed- <a href="http://developer.android.com/reference/android/graphics/drawable/VectorDrawable.html">VectorDrawable</a> and <a href="http://developer.android.com/reference/android/graphics/drawable/AnimatedVectorDrawable.html">AnimatedVectorDrawable</a>.</p>

<!--more-->


<p><em>Edit: looks like those classes became so popular that the Android team decided to add them to the <a href="http://android-developers.blogspot.co.il/2016/02/android-support-library-232.html">latest support library</a>, yay!</em></p>

<h2>Android resources</h2>

<p>In Android, recourses took lots of space in the final APK, tools like Proguard or loading modules dynamically helped the developers very much decreasing their app size, but when it came to assets, we were very limited. You had to choose between create asset for each density or paying with cpu time and let android doing the resizing and risk by not perfect asset.</p>

<p>I saw couple of apps that choose to download their assets from the internet but that&rsquo;s might be problematic for first run (intro) or cases you don&rsquo;t have a connection.</p>

<p>That&rsquo;s why I was so happy hearing about the new VectorDrawable introduced in API 21, that was let us the ability to create vector shapes and scale them easily for all screen sizes. This was really great for icons or small buttons.</p>

<p>Of course, developers were able to do it before with a custom view and just draw the icon them self with Path, but the VectorDrawable save us the unnecessary view and it also use the SVG Path syntax that it much easier and much more popular. Moreover- Android Studio were able to show you a vector drawable preview, what that make it much more connivance!</p>

<h2>Animations</h2>

<p>Animations were a pain too. You basically had 3 options:</p>

<ol>
<li><p>For a simple animations (like scaling, fading or moving) using the build-in view property animation, that was the case for 90% of the time.</p></li>
<li><p>If you had more complex animation on complex view you could create a custom animation, but for this you had to write lots of code</p></li>
<li><p>Use AnimationDrawable and put drawable for each frame.</p></li>
</ol>


<p>So again- for not trivial cases, you had to choose between writing lots of code or putting lots of assets.</p>

<p>That&rsquo;s when AnimatedVectorDrawable introduced and let developers use basic animations with their VectorDrawables with few lines of code and much lower space.</p>

<h2>Live example</h2>

<p>Let&rsquo;s start- assume we have some search component and we want to move to and from search state. So we need to animate between search icon and cancel icon:</p>

<p><img src="https://shem8.files.wordpress.com/2016/02/search_icon.png" width="150" height="150">
<img src="https://shem8.files.wordpress.com/2016/02/cancel_icon.png" width="150" height="150"></p>

<p>And the animation between those 2 icons (Added guides and slow motion to better understand the transition):</p>

<p><img class="center" src="https://shem8.files.wordpress.com/2016/02/gif.gif"></p>

<p>As you can see we actually have 3 shapes that moves: 2 half circles that moves to lines (green and blue) and the line of the magnifying glass that just getting bigger and reaching to the end.</p>

<p>First we need to create the shapes for the search icon:</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span></span><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;vector</span><span class="w"> </span><span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'><span class="w">    </span><span class="na">android:width=</span><span class="s">&quot;24dp&quot;</span>
</span><span class='line'><span class="w">    </span><span class="na">android:height=</span><span class="s">&quot;24dp&quot;</span>
</span><span class='line'><span class="w">    </span><span class="na">android:viewportWidth=</span><span class="s">&quot;24&quot;</span>
</span><span class='line'><span class="w">    </span><span class="na">android:viewportHeight=</span><span class="s">&quot;24&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="w">    </span><span class="nt">&lt;path</span>
</span><span class='line'><span class="w">        </span><span class="na">android:name=</span><span class="s">&quot;line&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:pathData=</span><span class="s">&quot;M5.705,5.705 L18.295,18.295&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:strokeWidth=</span><span class="s">&quot;2&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:strokeColor=</span><span class="s">&quot;#000000&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:trimPathStart=</span><span class="s">&quot;0.45&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:trimPathEnd=</span><span class="s">&quot;1&quot;</span><span class="w"> </span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="w">    </span><span class="nt">&lt;path</span>
</span><span class='line'><span class="w">        </span><span class="na">android:name=</span><span class="s">&quot;circle1&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:pathData=</span><span class="s">&quot;M5.705,5.705 A 4 4 0 1 1 12,12 L5.705,18.295&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:strokeWidth=</span><span class="s">&quot;2&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:strokeColor=</span><span class="s">&quot;#000000&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:trimPathStart=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:trimPathEnd=</span><span class="s">&quot;0.6&quot;</span><span class="w"> </span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="w">    </span><span class="nt">&lt;path</span>
</span><span class='line'><span class="w">        </span><span class="na">android:name=</span><span class="s">&quot;circle2&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:pathData=</span><span class="s">&quot;M18.295,5.705 L12,12 A 4 4 0 1 1 5.705,5.705&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:strokeWidth=</span><span class="s">&quot;2&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:strokeColor=</span><span class="s">&quot;#000000&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:trimPathStart=</span><span class="s">&quot;0.4&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:trimPathEnd=</span><span class="s">&quot;1&quot;</span><span class="w"> </span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/vector&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


<p>The syntax for creating SVG paths is not that complicated and you can learn about it <a href="https://www.w3.org/TR/SVG/paths.html">here</a>, Android Studio is also very handy here because you can see a preview and also import existent material app icons and see their paths as described <a href="http://developer.android.com/tools/help/vector-asset-studio.html">here</a>.</p>

<p>Now lets create the animation, we&rsquo;ll focus on the animation from the search icon to cancel, the opposite is pretty the same just with reverse values. We going to create 3 different animations:</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span></span><span class="nt">&lt;set</span>
</span><span class='line'><span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'><span class="na">android:ordering=</span><span class="s">&quot;sequentially&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="w">    </span><span class="cm">&lt;!-- first we need to immediately reset state --&gt;</span>
</span><span class='line'><span class="w">    </span><span class="nt">&lt;objectAnimator</span>
</span><span class='line'><span class="w">        </span><span class="na">android:duration=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:propertyName=</span><span class="s">&quot;trimPathStart&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:valueFrom=</span><span class="s">&quot;0.45&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:valueTo=</span><span class="s">&quot;0.45&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="w">    </span><span class="cm">&lt;!-- then run the animation after a delay --&gt;</span>
</span><span class='line'><span class="w">    </span><span class="nt">&lt;objectAnimator</span>
</span><span class='line'><span class="w">        </span><span class="na">android:propertyName=</span><span class="s">&quot;trimPathStart&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:duration=</span><span class="s">&quot;300&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:startOffset=</span><span class="s">&quot;250&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:interpolator=</span><span class="s">&quot;@android:interpolator/fast_out_slow_in&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:valueFrom=</span><span class="s">&quot;0.45&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:valueTo=</span><span class="s">&quot;0&quot;</span><span class="w"> </span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/set&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>




<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span></span><span class="nt">&lt;set</span>
</span><span class='line'><span class="w">    </span><span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'><span class="w">    </span><span class="na">android:ordering=</span><span class="s">&quot;together&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="w">    </span><span class="nt">&lt;objectAnimator</span>
</span><span class='line'><span class="w">        </span><span class="na">android:propertyName=</span><span class="s">&quot;trimPathStart&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:valueFrom=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:valueTo=</span><span class="s">&quot;0.6&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:duration=</span><span class="s">&quot;450&quot;</span><span class="w"> </span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="w">    </span><span class="nt">&lt;objectAnimator</span>
</span><span class='line'><span class="w">        </span><span class="na">android:propertyName=</span><span class="s">&quot;trimPathEnd&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:valueFrom=</span><span class="s">&quot;0.6&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:valueTo=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:duration=</span><span class="s">&quot;600&quot;</span><span class="w"> </span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/set&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>




<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span></span><span class="nt">&lt;set</span>
</span><span class='line'><span class="w">    </span><span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'><span class="w">    </span><span class="na">android:ordering=</span><span class="s">&quot;together&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="w">    </span><span class="nt">&lt;objectAnimator</span>
</span><span class='line'><span class="w">        </span><span class="na">android:propertyName=</span><span class="s">&quot;trimPathStart&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:valueFrom=</span><span class="s">&quot;0.4&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:valueTo=</span><span class="s">&quot;0&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:duration=</span><span class="s">&quot;600&quot;</span><span class="w"> </span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="w">    </span><span class="nt">&lt;objectAnimator</span>
</span><span class='line'><span class="w">        </span><span class="na">android:propertyName=</span><span class="s">&quot;trimPathEnd&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:valueFrom=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:valueTo=</span><span class="s">&quot;0.4&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:duration=</span><span class="s">&quot;450&quot;</span><span class="w"> </span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/set&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


<p>The animations are pretty basics and what we&rsquo;re doing here is just changing the start or the end of the path. Now we need to bring all animation together:</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span></span><span class="nt">&lt;animated-vector</span>
</span><span class='line'><span class="w">    </span><span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'><span class="w">    </span><span class="na">android:drawable=</span><span class="s">&quot;@drawable/searchback_search&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="w">    </span><span class="nt">&lt;target</span>
</span><span class='line'><span class="w">        </span><span class="na">android:name=</span><span class="s">&quot;line&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:animation=</span><span class="s">&quot;@animator/line_to_cancel&quot;</span><span class="w"> </span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="w">    </span><span class="nt">&lt;target</span>
</span><span class='line'><span class="w">        </span><span class="na">android:name=</span><span class="s">&quot;circle1&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:animation=</span><span class="s">&quot;@animator/circle1_to_cancel&quot;</span><span class="w"> </span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="w">    </span><span class="nt">&lt;target</span>
</span><span class='line'><span class="w">        </span><span class="na">android:name=</span><span class="s">&quot;circle2&quot;</span>
</span><span class='line'><span class="w">        </span><span class="na">android:animation=</span><span class="s">&quot;@animator/circle2_to_cancel&quot;</span><span class="w"> </span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/animated-vector&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


<p>And now you can easily use the  search_to_cancel drawable in code, just don&rsquo;t forget to call <strong>start()</strong>:</p>

<p><img class="center" src="https://shem8.files.wordpress.com/2016/02/final.gif"></p>

<p>A few notes regarding to this process:</p>

<ol>
<li><p>Without <a href="//twitter.com/crafty">Nick Butcher</a> and his great resources (like the <a href="https://github.com/nickbutcher/plaid">plaid</a> app) I wouldn&rsquo;t know anything about AnimatedVectorDrawable, so a lot of credit from this blog post should go to him.</p></li>
<li><p>Most of the paths are not that easy to build and you&rsquo;ll need to play with this pretty much, you can use tools like Photoshop to export SVG data, but still, some manually work be will here.</p></li>
<li><p>The preview in Android Studio for the drawables is a bit buggy (especially around trimmed paths) so you need to test some things on device sometimes.</p></li>
<li><p>From what I saw- on the first times the animation can stuck, so it better to set the final asset state after some delay to make sure the icon looks good in the end of the animation.</p></li>
</ol>


<p>That&rsquo;s for this time, hopes this will help you in the next time you want to build a great UX. =)
<br>
<br></p>

<hr />

<p><strong>Liked this post? Please share it with your friends!</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My first open source lib]]></title>
    <link href="http://blog.shem.dev/blog/2016/02/12/my-first-open-source-lib/"/>
    <updated>2016-02-12T07:30:38+00:00</updated>
    <id>http://blog.shem.dev/blog/2016/02/12/my-first-open-source-lib</id>
    <content type="html"><![CDATA[<p>As part of my last <a href="https://medium.com/life-learning/the-one-side-project-per-year-challenge-fa3c64a48da6#.3vp2es9hh">Friday project</a> I created a new Android app (releasing it soon!). In this project I decided to focus on 2 new things I want to learn:</p>

<!--more-->


<ol>
<li><p>How to write Android apps with <a href="https://shem8.wordpress.com/2016/01/01/kotlin-a-better-java-for-android/">Kotlin</a></p></li>
<li><p>Create an awesome UI and animations</p></li>
</ol>


<p>The first one was pretty straight forward, because I am a technical guy- learning (another) programming language wasn&rsquo;t so difficult, and sure enough, I quickly pulled a simple Kotlin app that worked.</p>

<p>The second part was a littler trickier, I&rsquo;m lucky enough to work with a <a href="https://medium.com/@etgalim">great designer</a> so I&rsquo;m not used to create an amazing UI (although I have a pretty solid background with photoshop). That&rsquo;s when <a href="http://www.materialup.com/">MaterialUp</a>, the home for a great material designs inspirations, came to the rescue.</p>

<p>My first screen was a login screen, so I searched for this kind of view and found a <a href="http://www.materialup.com/posts/compact-login">great one</a> that I wanted to use. After couple of hours of hacking I manage to implement it in code. I was so satisfy from the result so in the following week I showed many of my colleges in my work place what I was doing, this thing spread out quickly and couple of days later one of the product guys from another team was asking me if he can use it in their app.</p>

<blockquote>I was happy! The best thing that can happen to you when building something is that someone, on his own will, want to use what you created.</blockquote>


<p>&ldquo;But&rdquo; and if you know product guys, you surely know there is always a but &ldquo;We need you to change some of the fields names, and we probably going to use another icon&rdquo;. I was familiar with the code, those things was pretty easy to handle and I agreed.</p>

<p>Now I had two options:</p>

<ol>
<li><p>Copy the code, working with him in house and customise the hell out of the view for him.</p></li>
<li><p>Create a real library with a real API for customise everything in the view and get away from endless features requests.</p></li>
</ol>


<p>So library it is.</p>

<h2>Creating the library</h2>

<p>First I decided to rewrite the view in Java for it to be more Android-developers-friendly, that was a great (great, great) showcase of how Kotlin is much quicker to hack and how much boilerplate Java has.</p>

<p>Next I extracted all relevant code to external library and then to external project for exporting.</p>

<p>I decided to push the view as is (without any option to change anything) just to check how&rsquo;s all the uploading thing is going. Lucky enough I found <a href="http://inthecheesefactory.com/blog/how-to-upload-library-to-jcenter-maven-central-as-dependency/en">this article</a> that helped me with this mess (not that trivial at all) and unlucky enough I didn&rsquo;t see <a href="https://www.youtube.com/watch?v=NFfNiO3CR6w">this video</a> at the time.</p>

<p>After couple of hours of struggling with gradle and jcenter I manage to create <a href="https://github.com/shem8/MaterialLogin">my own real library</a> and pull it from gradle.</p>

<h2>What happened next</h2>

<p>Then I was comment to the author of the original design that his design was so elegant that I had to implement it in Android with a link to the my library. Shortly after, one of the site founders submit <a href="http://www.materialup.com/posts/materiallogin">my lib to the site as a new resource</a> and that's when I started to get a lot of traction, couple of days later and the library was trending on Github, pull requests and issues were opened and I suddenly had a real users to support, and even better, some users were contribute and helped me adding some features!</p>

<h2>Conclusions</h2>

<ul>
<li><p>If you have some cool piece of code that you feel that others will want to use it- release it to an open source library.</p></li>
<li><p>Do the simple things first- the first version can be very basic, wait to see what the users want.</p></li>
<li><p>Spread the word and let others know you build a great thing.</p></li>
</ul>


<p>My code came from running only on my testing app to be viewing by hundreds of people! And what about those product guy you ask? He might use it or no, but I got my users already =)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Andriod dev toolbox part 2]]></title>
    <link href="http://blog.shem.dev/blog/2016/01/21/andriod-dev-toolbox-part-2/"/>
    <updated>2016-01-21T08:48:23+00:00</updated>
    <id>http://blog.shem.dev/blog/2016/01/21/andriod-dev-toolbox-part-2</id>
    <content type="html"><![CDATA[<p>The second part of the Android dev toolbox lecture,
This time we’ll focus on collection of tools and resources that help you build better apps in less time.</p>

<!--more-->


<p>Slides are also available <a href="https://docs.google.com/presentation/d/1GtJH_mBY6TM0yk2cQEYWW6yCntyi-6HfjuzTzt9nuhQ/pub?start=false&amp;loop=false&amp;delayms=30000">here</a></p>

<p><a href="http://www.slideshare.net/shemMag/andriod-dev-toolbox-part-2">http://www.slideshare.net/shemMag/andriod-dev-toolbox-part-2</a></p>
]]></content>
  </entry>
  
</feed>
